/*! For license information please see bundle-5aa3b99b.js.LICENSE.txt */
(()=>{var e={1247:(e,t,n)=>{"use strict";var r=n(9982),a=n(6540),l=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}var u=Symbol.for("react.element"),s=Symbol.for("react.transitional.element"),c=Symbol.for("react.portal"),f=Symbol.for("react.fragment"),d=Symbol.for("react.strict_mode"),p=Symbol.for("react.profiler"),h=Symbol.for("react.provider"),m=Symbol.for("react.consumer"),g=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),y=Symbol.for("react.suspense"),b=Symbol.for("react.suspense_list"),w=Symbol.for("react.memo"),k=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var S=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var x=Symbol.for("react.memo_cache_sentinel"),E=Symbol.iterator;function C(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=E&&e[E]||e["@@iterator"])?e:null}var _=Symbol.for("react.client.reference");function P(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===_?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case f:return"Fragment";case c:return"Portal";case p:return"Profiler";case d:return"StrictMode";case y:return"Suspense";case b:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case g:return(e.displayName||"Context")+".Provider";case m:return(e._context.displayName||"Context")+".Consumer";case v:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case w:return null!==(t=e.displayName||null)?t:P(e.type)||"Memo";case k:t=e._payload,e=e._init;try{return P(e(t))}catch(e){}}return null}var z,j,N=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,T=Object.assign;function L(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||"",j=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+z+e+j}var R=!1;function O(e,t){if(!e||R)return"";R=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var l=r.DetermineComponentFrameRoot(),o=l[0],i=l[1];if(o&&i){var u=o.split("\n"),s=i.split("\n");for(a=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;a<s.length&&!s[a].includes("DetermineComponentFrameRoot");)a++;if(r===u.length||a===s.length)for(r=u.length-1,a=s.length-1;1<=r&&0<=a&&u[r]!==s[a];)a--;for(;1<=r&&0<=a;r--,a--)if(u[r]!==s[a]){if(1!==r||1!==a)do{if(r--,0>--a||u[r]!==s[a]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=a);break}}}finally{R=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?L(n):""}function A(e){switch(e.tag){case 26:case 27:case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 15:return O(e.type,!1);case 11:return O(e.type.render,!1);case 1:return O(e.type,!0);default:return""}}function F(e){try{var t="";do{t+=A(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function I(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function D(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function M(e){if(I(e)!==e)throw Error(o(188))}function $(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=$(e)))return t;e=e.sibling}return null}var U=Array.isArray,B=l.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,H={pending:!1,data:null,method:null,action:null},q=[],V=-1;function W(e){return{current:e}}function Q(e){0>V||(e.current=q[V],q[V]=null,V--)}function G(e,t){V++,q[V]=e.current,e.current=t}var Y=W(null),K=W(null),X=W(null),Z=W(null);function J(e,t){switch(G(X,t),G(K,e),G(Y,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Kc(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Xc(e=Kc(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}Q(Y),G(Y,t)}function ee(){Q(Y),Q(K),Q(X)}function te(e){null!==e.memoizedState&&G(Z,e);var t=Y.current,n=Xc(t,e.type);t!==n&&(G(K,e),G(Y,n))}function ne(e){K.current===e&&(Q(Y),Q(K)),Z.current===e&&(Q(Z),If._currentValue=H)}var re=Object.prototype.hasOwnProperty,ae=r.unstable_scheduleCallback,le=r.unstable_cancelCallback,oe=r.unstable_shouldYield,ie=r.unstable_requestPaint,ue=r.unstable_now,se=r.unstable_getCurrentPriorityLevel,ce=r.unstable_ImmediatePriority,fe=r.unstable_UserBlockingPriority,de=r.unstable_NormalPriority,pe=r.unstable_LowPriority,he=r.unstable_IdlePriority,me=r.log,ge=r.unstable_setDisableYieldValue,ve=null,ye=null;function be(e){if("function"==typeof me&&ge(e),ye&&"function"==typeof ye.setStrictMode)try{ye.setStrictMode(ve,e)}catch(e){}}var we=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ke(e)/Se|0)|0},ke=Math.log,Se=Math.LN2,xe=128,Ee=4194304;function Ce(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function _e(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,o=e.warmLanes;e=0!==e.finishedLanes;var i=134217727&n;return 0!==i?0!=(n=i&~a)?r=Ce(n):0!=(l&=i)?r=Ce(l):e||0!=(o=i&~o)&&(r=Ce(o)):0!=(i=n&~a)?r=Ce(i):0!==l?r=Ce(l):e||0!=(o=n&~o)&&(r=Ce(o)),0===r?0:0===t||t===r||t&a||!((a=r&-r)>=(o=t&-t)||32===a&&4194176&o)?r:t}function Pe(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function ze(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function je(){var e=xe;return!(4194176&(xe<<=1))&&(xe=128),e}function Ne(){var e=Ee;return!(62914560&(Ee<<=1))&&(Ee=4194304),e}function Te(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Le(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Re(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-we(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Oe(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-we(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Ae(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Fe(){var e=B.p;return 0!==e?e:void 0===(e=window.event)?32:Zf(e.type)}var Ie=Math.random().toString(36).slice(2),De="__reactFiber$"+Ie,Me="__reactProps$"+Ie,$e="__reactContainer$"+Ie,Ue="__reactEvents$"+Ie,Be="__reactListeners$"+Ie,He="__reactHandles$"+Ie,qe="__reactResources$"+Ie,Ve="__reactMarker$"+Ie;function We(e){delete e[De],delete e[Me],delete e[Ue],delete e[Be],delete e[He]}function Qe(e){var t=e[De];if(t)return t;for(var n=e.parentNode;n;){if(t=n[$e]||n[De]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=sf(e);null!==e;){if(n=e[De])return n;e=sf(e)}return t}n=(e=n).parentNode}return null}function Ge(e){if(e=e[De]||e[$e]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ye(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function Ke(e){var t=e[qe];return t||(t=e[qe]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Xe(e){e[Ve]=!0}var Ze=new Set,Je={};function et(e,t){tt(e,t),tt(e+"Capture",t)}function tt(e,t){for(Je[e]=t,e=0;e<t.length;e++)Ze.add(t[e])}var nt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),rt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),at={},lt={};function ot(e,t,n){if(a=t,re.call(lt,a)||!re.call(at,a)&&(rt.test(a)?lt[a]=!0:(at[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function it(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function ut(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ft(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var ht=/[\n"\\]/g;function mt(e){return e.replace(ht,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,a,l,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?yt(e,o,st(t)):null!=n?yt(e,o,st(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=l&&(e.defaultChecked=!!l),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+st(i):e.removeAttribute("name")}function vt(e,t,n,r,a,l,o,i){if(null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.type=l),null!=t||null!=n){if(("submit"===l||"reset"===l)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function yt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function wt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function kt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(U(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function St(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var xt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Et(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||xt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Ct(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&Et(e,a,r)}else for(var l in t)t.hasOwnProperty(l)&&Et(e,l,t[l])}function _t(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Pt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),zt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function jt(e){return zt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Nt=null;function Tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Lt=null,Rt=null;function Ot(e){var t=Ge(e);if(t&&(e=t.stateNode)){var n=e[Me]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+mt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Me]||null;if(!a)throw Error(o(90));gt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":wt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var At=!1;function Ft(e,t,n){if(At)return e(t,n);At=!0;try{return e(t)}finally{if(At=!1,(null!==Lt||null!==Rt)&&(Ds(),Lt&&(t=Lt,e=Rt,Rt=Lt=null,Ot(t),e)))for(t=0;t<e.length;t++)Ot(e[t])}}function It(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Me]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Dt=!1;if(nt)try{var Mt={};Object.defineProperty(Mt,"passive",{get:function(){Dt=!0}}),window.addEventListener("test",Mt,Mt),window.removeEventListener("test",Mt,Mt)}catch(e){Dt=!1}var $t=null,Ut=null,Bt=null;function Ht(){if(Bt)return Bt;var e,t,n=Ut,r=n.length,a="value"in $t?$t.value:$t.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[l-t];t++);return Bt=a.slice(e,1<t?1-t:void 0)}function qt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Vt(){return!0}function Wt(){return!1}function Qt(e){function t(t,n,r,a,l){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?Vt:Wt,this.isPropagationStopped=Wt,this}return T(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vt)},persist:function(){},isPersistent:Vt}),t}var Gt,Yt,Kt,Xt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=Qt(Xt),Jt=T({},Xt,{view:0,detail:0}),en=Qt(Jt),tn=T({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Kt&&(Kt&&"mousemove"===e.type?(Gt=e.screenX-Kt.screenX,Yt=e.screenY-Kt.screenY):Yt=Gt=0,Kt=e),Gt)},movementY:function(e){return"movementY"in e?e.movementY:Yt}}),nn=Qt(tn),rn=Qt(T({},tn,{dataTransfer:0})),an=Qt(T({},Jt,{relatedTarget:0})),ln=Qt(T({},Xt,{animationName:0,elapsedTime:0,pseudoElement:0})),on=Qt(T({},Xt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),un=Qt(T({},Xt,{data:0})),sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=fn[e])&&!!t[e]}function pn(){return dn}var hn=Qt(T({},Jt,{key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=qt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:pn,charCode:function(e){return"keypress"===e.type?qt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?qt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mn=Qt(T({},tn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=Qt(T({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:pn})),vn=Qt(T({},Xt,{propertyName:0,elapsedTime:0,pseudoElement:0})),yn=Qt(T({},tn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),bn=Qt(T({},Xt,{newState:0,oldState:0})),wn=[9,13,27,32],kn=nt&&"CompositionEvent"in window,Sn=null;nt&&"documentMode"in document&&(Sn=document.documentMode);var xn=nt&&"TextEvent"in window&&!Sn,En=nt&&(!kn||Sn&&8<Sn&&11>=Sn),Cn=String.fromCharCode(32),_n=!1;function Pn(e,t){switch(e){case"keyup":return-1!==wn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Nn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Tn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Nn[e.type]:"textarea"===t}function Ln(e,t,n,r){Lt?Rt?Rt.push(r):Rt=[r]:Lt=r,0<(t=Fc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Rn=null,On=null;function An(e){zc(e,0)}function Fn(e){if(dt(Ye(e)))return e}function In(e,t){if("change"===e)return t}var Dn=!1;if(nt){var Mn;if(nt){var $n="oninput"in document;if(!$n){var Un=document.createElement("div");Un.setAttribute("oninput","return;"),$n="function"==typeof Un.oninput}Mn=$n}else Mn=!1;Dn=Mn&&(!document.documentMode||9<document.documentMode)}function Bn(){Rn&&(Rn.detachEvent("onpropertychange",Hn),On=Rn=null)}function Hn(e){if("value"===e.propertyName&&Fn(On)){var t=[];Ln(t,On,e,Tt(e)),Ft(An,t)}}function qn(e,t,n){"focusin"===e?(Bn(),On=n,(Rn=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Bn()}function Vn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Fn(On)}function Wn(e,t){if("click"===e)return Fn(t)}function Qn(e,t){if("input"===e||"change"===e)return Fn(t)}var Gn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Yn(e,t){if(Gn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!re.call(t,a)||!Gn(e[a],t[a]))return!1}return!0}function Kn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xn(e,t){var n,r=Kn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Kn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function er(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function tr(e,t){var n=Jn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Zn(t.ownerDocument.documentElement,t)){if(null!==r&&er(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var a=t.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!n.extend&&l>r&&(a=r,r=l,l=a),a=Xn(t,l);var o=Xn(t,r);a&&o&&(1!==n.rangeCount||n.anchorNode!==a.node||n.anchorOffset!==a.offset||n.focusNode!==o.node||n.focusOffset!==o.offset)&&((e=e.createRange()).setStart(a.node,a.offset),n.removeAllRanges(),l>r?(n.addRange(e),n.extend(o.node,o.offset)):(e.setEnd(o.node,o.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var nr=nt&&"documentMode"in document&&11>=document.documentMode,rr=null,ar=null,lr=null,or=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;or||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},lr&&Yn(lr,r)||(lr=r,0<(r=Fc(ar,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function ur(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:ur("Animation","AnimationEnd"),animationiteration:ur("Animation","AnimationIteration"),animationstart:ur("Animation","AnimationStart"),transitionrun:ur("Transition","TransitionRun"),transitionstart:ur("Transition","TransitionStart"),transitioncancel:ur("Transition","TransitionCancel"),transitionend:ur("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in fr)return cr[e]=n[t];return e}nt&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var pr=dr("animationend"),hr=dr("animationiteration"),mr=dr("animationstart"),gr=dr("transitionrun"),vr=dr("transitionstart"),yr=dr("transitioncancel"),br=dr("transitionend"),wr=new Map,kr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function Sr(e,t){wr.set(e,t),et(t,[e])}var xr=[],Er=0,Cr=0;function _r(){for(var e=Er,t=Cr=Er=0;t<e;){var n=xr[t];xr[t++]=null;var r=xr[t];xr[t++]=null;var a=xr[t];xr[t++]=null;var l=xr[t];if(xr[t++]=null,null!==r&&null!==a){var o=r.pending;null===o?a.next=a:(a.next=o.next,o.next=a),r.pending=a}0!==l&&Nr(n,a,l)}}function Pr(e,t,n,r){xr[Er++]=e,xr[Er++]=t,xr[Er++]=n,xr[Er++]=r,Cr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function zr(e,t,n,r){return Pr(e,t,n,r),Tr(e)}function jr(e,t){return Pr(e,null,null,t),Tr(e)}function Nr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,l=e.return;null!==l;)l.childLanes|=n,null!==(r=l.alternate)&&(r.childLanes|=n),22===l.tag&&(null===(e=l.stateNode)||1&e._visibility||(a=!0)),e=l,l=l.return;a&&null!==t&&3===e.tag&&(l=e.stateNode,a=31-we(n),null===(e=(l=l.hiddenUpdates)[a])?l[a]=[t]:e.push(t),t.lane=536870912|n)}function Tr(e){if(50<zs)throw zs=0,js=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Lr={},Rr=new WeakMap;function Or(e,t){if("object"==typeof e&&null!==e){var n=Rr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:F(t)},Rr.set(e,t),t)}return{value:e,source:t,stack:F(t)}}var Ar=[],Fr=0,Ir=null,Dr=0,Mr=[],$r=0,Ur=null,Br=1,Hr="";function qr(e,t){Ar[Fr++]=Dr,Ar[Fr++]=Ir,Ir=e,Dr=t}function Vr(e,t,n){Mr[$r++]=Br,Mr[$r++]=Hr,Mr[$r++]=Ur,Ur=e;var r=Br;e=Hr;var a=32-we(r)-1;r&=~(1<<a),n+=1;var l=32-we(t)+a;if(30<l){var o=a-a%5;l=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Br=1<<32-we(t)+a|n<<a|r,Hr=l+e}else Br=1<<l|n<<a|r,Hr=e}function Wr(e){null!==e.return&&(qr(e,1),Vr(e,1,0))}function Qr(e){for(;e===Ir;)Ir=Ar[--Fr],Ar[Fr]=null,Dr=Ar[--Fr],Ar[Fr]=null;for(;e===Ur;)Ur=Mr[--$r],Mr[$r]=null,Hr=Mr[--$r],Mr[$r]=null,Br=Mr[--$r],Mr[$r]=null}var Gr=null,Yr=null,Kr=!1,Xr=null,Zr=!1,Jr=Error(o(519));function ea(e){throw la(Or(Error(o(418,"")),e)),Jr}function ta(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[De]=e,t[Me]=r,n){case"dialog":jc("cancel",t),jc("close",t);break;case"iframe":case"object":case"embed":jc("load",t);break;case"video":case"audio":for(n=0;n<_c.length;n++)jc(_c[n],t);break;case"source":jc("error",t);break;case"img":case"image":case"link":jc("error",t),jc("load",t);break;case"details":jc("toggle",t);break;case"input":jc("invalid",t),vt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ft(t);break;case"select":jc("invalid",t);break;case"textarea":jc("invalid",t),kt(t,r.value,r.defaultValue,r.children),ft(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Bc(t.textContent,n)?(null!=r.popover&&(jc("beforetoggle",t),jc("toggle",t)),null!=r.onScroll&&jc("scroll",t),null!=r.onScrollEnd&&jc("scrollend",t),null!=r.onClick&&(t.onclick=Hc),t=!0):t=!1,t||ea(e)}function na(e){for(Gr=e.return;Gr;)switch(Gr.tag){case 3:case 27:return void(Zr=!0);case 5:case 13:return void(Zr=!1);default:Gr=Gr.return}}function ra(e){if(e!==Gr)return!1;if(!Kr)return na(e),Kr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Zc(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Yr&&ea(e),na(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Yr=uf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Yr=null}}else Yr=Gr?uf(e.stateNode.nextSibling):null;return!0}function aa(){Yr=Gr=null,Kr=!1}function la(e){null===Xr?Xr=[e]:Xr.push(e)}var oa=Error(o(460)),ia=Error(o(474)),ua={then:function(){}};function sa(e){return"fulfilled"===(e=e.status)||"rejected"===e}function ca(){}function fa(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(ca,ca),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===oa)throw Error(o(483));throw e;default:if("string"==typeof t.status)t.then(ca,ca);else{if(null!==(e=ts)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===oa)throw Error(o(483));throw e}throw da=t,oa}}var da=null;function pa(){if(null===da)throw Error(o(459));var e=da;return da=null,e}var ha=null,ma=0;function ga(e){var t=ma;return ma+=1,null===ha&&(ha=[]),fa(ha,e,t)}function va(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function ya(e,t){if(t.$$typeof===u)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ba(e){return(0,e._init)(e._payload)}function wa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=Iu(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Bu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n,r){var l=n.type;return l===f?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===k&&ba(l)===t.type)?(va(t=a(t,n.props),n),t.return=e,t):(va(t=Mu(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function h(e,t,n,r,l){return null===t||7!==t.tag?((t=$u(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function m(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Bu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case s:return va(n=Mu(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case c:return(t=Hu(t,e.mode,n)).return=e,t;case k:return m(e,t=(0,t._init)(t._payload),n)}if(U(t)||C(t))return(t=$u(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return m(e,ga(t),n);if(t.$$typeof===g)return m(e,_i(e,t),n);ya(e,t)}return null}function v(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case s:return n.key===a?d(e,t,n,r):null;case c:return n.key===a?p(e,t,n,r):null;case k:return v(e,t,n=(a=n._init)(n._payload),r)}if(U(n)||C(n))return null!==a?null:h(e,t,n,r,null);if("function"==typeof n.then)return v(e,t,ga(n),r);if(n.$$typeof===g)return v(e,t,_i(e,n),r);ya(e,n)}return null}function y(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case s:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a);case c:return p(t,e=e.get(null===r.key?n:r.key)||null,r,a);case k:return y(e,t,n,r=(0,r._init)(r._payload),a)}if(U(r)||C(r))return h(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return y(e,t,n,ga(r),a);if(r.$$typeof===g)return y(e,t,n,_i(t,r),a);ya(t,r)}return null}function b(u,d,p,h){if("object"==typeof p&&null!==p&&p.type===f&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case s:e:{for(var w=p.key;null!==d;){if(d.key===w){if((w=p.type)===f){if(7===d.tag){n(u,d.sibling),(h=a(d,p.props.children)).return=u,u=h;break e}}else if(d.elementType===w||"object"==typeof w&&null!==w&&w.$$typeof===k&&ba(w)===d.type){n(u,d.sibling),va(h=a(d,p.props),p),h.return=u,u=h;break e}n(u,d);break}t(u,d),d=d.sibling}p.type===f?((h=$u(p.props.children,u.mode,h,p.key)).return=u,u=h):(va(h=Mu(p.type,p.key,p.props,null,u.mode,h),p),h.return=u,u=h)}return i(u);case c:e:{for(w=p.key;null!==d;){if(d.key===w){if(4===d.tag&&d.stateNode.containerInfo===p.containerInfo&&d.stateNode.implementation===p.implementation){n(u,d.sibling),(h=a(d,p.children||[])).return=u,u=h;break e}n(u,d);break}t(u,d),d=d.sibling}(h=Hu(p,u.mode,h)).return=u,u=h}return i(u);case k:return b(u,d,p=(w=p._init)(p._payload),h)}if(U(p))return function(a,o,i,u){for(var s=null,c=null,f=o,d=o=0,p=null;null!==f&&d<i.length;d++){f.index>d?(p=f,f=null):p=f.sibling;var h=v(a,f,i[d],u);if(null===h){null===f&&(f=p);break}e&&f&&null===h.alternate&&t(a,f),o=l(h,o,d),null===c?s=h:c.sibling=h,c=h,f=p}if(d===i.length)return n(a,f),Kr&&qr(a,d),s;if(null===f){for(;d<i.length;d++)null!==(f=m(a,i[d],u))&&(o=l(f,o,d),null===c?s=f:c.sibling=f,c=f);return Kr&&qr(a,d),s}for(f=r(f);d<i.length;d++)null!==(p=y(f,a,d,i[d],u))&&(e&&null!==p.alternate&&f.delete(null===p.key?d:p.key),o=l(p,o,d),null===c?s=p:c.sibling=p,c=p);return e&&f.forEach((function(e){return t(a,e)})),Kr&&qr(a,d),s}(u,d,p,h);if(C(p)){if("function"!=typeof(w=C(p)))throw Error(o(150));return function(a,i,u,s){if(null==u)throw Error(o(151));for(var c=null,f=null,d=i,p=i=0,h=null,g=u.next();null!==d&&!g.done;p++,g=u.next()){d.index>p?(h=d,d=null):h=d.sibling;var b=v(a,d,g.value,s);if(null===b){null===d&&(d=h);break}e&&d&&null===b.alternate&&t(a,d),i=l(b,i,p),null===f?c=b:f.sibling=b,f=b,d=h}if(g.done)return n(a,d),Kr&&qr(a,p),c;if(null===d){for(;!g.done;p++,g=u.next())null!==(g=m(a,g.value,s))&&(i=l(g,i,p),null===f?c=g:f.sibling=g,f=g);return Kr&&qr(a,p),c}for(d=r(d);!g.done;p++,g=u.next())null!==(g=y(d,a,p,g.value,s))&&(e&&null!==g.alternate&&d.delete(null===g.key?p:g.key),i=l(g,i,p),null===f?c=g:f.sibling=g,f=g);return e&&d.forEach((function(e){return t(a,e)})),Kr&&qr(a,p),c}(u,d,p=w.call(p),h)}if("function"==typeof p.then)return b(u,d,ga(p),h);if(p.$$typeof===g)return b(u,d,_i(u,p),h);ya(u,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==d&&6===d.tag?(n(u,d.sibling),(h=a(d,p)).return=u,u=h):(n(u,d),(h=Bu(p,u.mode,h)).return=u,u=h),i(u)):n(u,d)}return function(e,t,n,r){try{ma=0;var a=b(e,t,n,r);return ha=null,a}catch(t){if(t===oa)throw t;var l=Au(29,t,null,e.mode);return l.lanes=r,l.return=e,l}}}var ka=wa(!0),Sa=wa(!1),xa=W(null),Ea=W(0);function Ca(e,t){G(Ea,e=ss),G(xa,t),ss=e|t.baseLanes}function _a(){G(Ea,ss),G(xa,xa.current)}function Pa(){ss=Ea.current,Q(xa),Q(Ea)}var za=W(null),ja=null;function Na(e){var t=e.alternate;G(Oa,1&Oa.current),G(za,e),null===ja&&(null===t||null!==xa.current||null!==t.memoizedState)&&(ja=e)}function Ta(e){if(22===e.tag){if(G(Oa,Oa.current),G(za,e),null===ja){var t=e.alternate;null!==t&&null!==t.memoizedState&&(ja=e)}}else La()}function La(){G(Oa,Oa.current),G(za,za.current)}function Ra(e){Q(za),ja===e&&(ja=null),Q(Oa)}var Oa=W(0);function Aa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Fa="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Ia=r.unstable_scheduleCallback,Da=r.unstable_NormalPriority,Ma={$$typeof:g,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function $a(){return{controller:new Fa,data:new Map,refCount:0}}function Ua(e){e.refCount--,0===e.refCount&&Ia(Da,(function(){e.controller.abort()}))}var Ba=null,Ha=0,qa=0,Va=null;function Wa(){if(0==--Ha&&null!==Ba){null!==Va&&(Va.status="fulfilled");var e=Ba;Ba=null,qa=0,Va=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Qa=N.S;N.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ba){var n=Ba=[];Ha=0,qa=kc(),Va={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ha++,t.then(Wa,Wa)}(0,t),null!==Qa&&Qa(e,t)};var Ga=W(null);function Ya(){var e=Ga.current;return null!==e?e:ts.pooledCache}function Ka(e,t){G(Ga,null===t?Ga.current:t.pool)}function Xa(){var e=Ya();return null===e?null:{parent:Ma._currentValue,pool:e}}var Za=0,Ja=null,el=null,tl=null,nl=!1,rl=!1,al=!1,ll=0,ol=0,il=null,ul=0;function sl(){throw Error(o(321))}function cl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Gn(e[n],t[n]))return!1;return!0}function fl(e,t,n,r,a,l){return Za=l,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,N.H=null===e||null===e.memoizedState?_o:Po,al=!1,l=n(r,a),al=!1,rl&&(l=pl(t,n,r,a)),dl(e),l}function dl(e){N.H=Co;var t=null!==el&&null!==el.next;if(Za=0,tl=el=Ja=null,nl=!1,ol=0,il=null,t)throw Error(o(300));null===e||qo||null!==(e=e.dependencies)&&xi(e)&&(qo=!0)}function pl(e,t,n,r){Ja=e;var a=0;do{if(rl&&(il=null),ol=0,rl=!1,25<=a)throw Error(o(301));if(a+=1,tl=el=null,null!=e.updateQueue){var l=e.updateQueue;l.lastEffect=null,l.events=null,l.stores=null,null!=l.memoCache&&(l.memoCache.index=0)}N.H=zo,l=t(n,r)}while(rl);return l}function hl(){var e=N.H,t=e.useState()[0];return t="function"==typeof t.then?wl(t):t,e=e.useState()[0],(null!==el?el.memoizedState:null)!==e&&(Ja.flags|=1024),t}function ml(){var e=0!==ll;return ll=0,e}function gl(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function vl(e){if(nl){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}nl=!1}Za=0,tl=el=Ja=null,rl=!1,ol=ll=0,il=null}function yl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===tl?Ja.memoizedState=tl=e:tl=tl.next=e,tl}function bl(){if(null===el){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=el.next;var t=null===tl?Ja.memoizedState:tl.next;if(null!==t)tl=t,el=e;else{if(null===e){if(null===Ja.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(el=e).memoizedState,baseState:el.baseState,baseQueue:el.baseQueue,queue:el.queue,next:null},null===tl?Ja.memoizedState=tl=e:tl=tl.next=e}return tl}function wl(e){var t=ol;return ol+=1,null===il&&(il=[]),e=fa(il,e,t),t=Ja,null===(null===tl?t.memoizedState:tl.next)&&(t=t.alternate,N.H=null===t||null===t.memoizedState?_o:Po),e}function kl(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return wl(e);if(e.$$typeof===g)return Ci(e)}throw Error(o(438,String(e)))}function Sl(e){var t=null,n=Ja.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Ja.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=x;return t.index++,n}function xl(e,t){return"function"==typeof t?t(e):t}function El(e){return Cl(bl(),el,e)}function Cl(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var a=e.baseQueue,l=r.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}t.baseQueue=a=l,r.pending=null}if(l=e.baseState,null===a)e.memoizedState=l;else{var u=i=null,s=null,c=t=a.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(rs&d)===d:(Za&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===qa&&(f=!0);else{if((Za&p)===p){c=c.next,p===qa&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=l):s=s.next=d,Ja.lanes|=p,fs|=p}d=c.action,al&&n(l,d),l=c.hasEagerState?c.eagerState:n(l,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=l):s=s.next=p,Ja.lanes|=d,fs|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=l:s.next=u,!Gn(l,e.memoizedState)&&(qo=!0,f&&null!==(n=Va)))throw n;e.memoizedState=l,e.baseState=i,e.baseQueue=s,r.lastRenderedState=l}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function _l(e){var t=bl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);Gn(l,t.memoizedState)||(qo=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function Pl(e,t,n){var r=Ja,a=bl(),l=Kr;if(l){if(void 0===n)throw Error(o(407));n=n()}else n=t();var i=!Gn((el||a).memoizedState,n);if(i&&(a.memoizedState=n,qo=!0),a=a.queue,Zl(Nl.bind(null,r,a,e),[e]),a.getSnapshot!==t||i||null!==tl&&1&tl.memoizedState.tag){if(r.flags|=2048,Ql(9,jl.bind(null,r,a,n,t),{destroy:void 0},null),null===ts)throw Error(o(349));l||60&Za||zl(r,t,n)}return n}function zl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Ja.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function jl(e,t,n,r){t.value=n,t.getSnapshot=r,Tl(t)&&Ll(e)}function Nl(e,t,n){return n((function(){Tl(t)&&Ll(e)}))}function Tl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Gn(e,n)}catch(e){return!0}}function Ll(e){var t=jr(e,2);null!==t&&Ls(t,0,2)}function Rl(e){var t=yl();if("function"==typeof e){var n=e;if(e=n(),al){be(!0);try{n()}finally{be(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:xl,lastRenderedState:e},t}function Ol(e,t,n,r){return e.baseState=n,Cl(e,el,"function"==typeof r?r:xl)}function Al(e,t,n,r,a){if(So(e))throw Error(o(485));if(null!==(e=t.action)){var l={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){l.listeners.push(e)}};null!==N.T?n(!0):l.isTransition=!1,r(l),null===(n=t.pending)?(l.next=t.pending=l,Fl(t,l)):(l.next=n.next,t.pending=n.next=l)}}function Fl(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var l=N.T,o={};N.T=o;try{var i=n(a,r),u=N.S;null!==u&&u(o,i),Il(e,t,i)}catch(n){Ml(e,t,n)}finally{N.T=l}}else try{Il(e,t,l=n(a,r))}catch(n){Ml(e,t,n)}}function Il(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Dl(e,t,n)}),(function(n){return Ml(e,t,n)})):Dl(e,t,n)}function Dl(e,t,n){t.status="fulfilled",t.value=n,$l(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Fl(e,n)))}function Ml(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,$l(t),t=t.next}while(t!==r)}e.action=null}function $l(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Ul(e,t){return t}function Bl(e,t){if(Kr){var n=ts.formState;if(null!==n){e:{var r=Ja;if(Kr){if(Yr){t:{for(var a=Yr,l=Zr;8!==a.nodeType;){if(!l){a=null;break t}if(null===(a=uf(a.nextSibling))){a=null;break t}}a="F!"===(l=a.data)||"F"===l?a:null}if(a){Yr=uf(a.nextSibling),r="F!"===a.data;break e}}ea(r)}r=!1}r&&(t=n[0])}}return(n=yl()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ul,lastRenderedState:t},n.queue=r,n=bo.bind(null,Ja,r),r.dispatch=n,r=Rl(!1),l=ko.bind(null,Ja,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=yl()).queue=a,n=Al.bind(null,Ja,a,l,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function Hl(e){return ql(bl(),el,e)}function ql(e,t,n){t=Cl(e,t,Ul)[0],e=El(xl)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?wl(t):t;var r=bl(),a=r.queue,l=a.dispatch;return n!==r.memoizedState&&(Ja.flags|=2048,Ql(9,Vl.bind(null,a,n),{destroy:void 0},null)),[t,l,e]}function Vl(e,t){e.action=t}function Wl(e){var t=bl(),n=el;if(null!==n)return ql(t,n,e);bl(),t=t.memoizedState;var r=(n=bl()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function Ql(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Ja.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Gl(){return bl().memoizedState}function Yl(e,t,n,r){var a=yl();Ja.flags|=e,a.memoizedState=Ql(1|t,n,{destroy:void 0},void 0===r?null:r)}function Kl(e,t,n,r){var a=bl();r=void 0===r?null:r;var l=a.memoizedState.inst;null!==el&&null!==r&&cl(r,el.memoizedState.deps)?a.memoizedState=Ql(t,n,l,r):(Ja.flags|=e,a.memoizedState=Ql(1|t,n,l,r))}function Xl(e,t){Yl(8390656,8,e,t)}function Zl(e,t){Kl(2048,8,e,t)}function Jl(e,t){return Kl(4,2,e,t)}function eo(e,t){return Kl(4,4,e,t)}function to(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function no(e,t,n){n=null!=n?n.concat([e]):null,Kl(4,4,to.bind(null,t,e),n)}function ro(){}function ao(e,t){var n=bl();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&cl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function lo(e,t){var n=bl();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&cl(t,r[1]))return r[0];if(r=e(),al){be(!0);try{e()}finally{be(!1)}}return n.memoizedState=[r,t],r}function oo(e,t,n){return void 0===n||1073741824&Za?e.memoizedState=t:(e.memoizedState=n,e=Ts(),Ja.lanes|=e,fs|=e,n)}function io(e,t,n,r){return Gn(n,t)?n:null!==xa.current?(e=oo(e,n,r),Gn(e,t)||(qo=!0),e):42&Za?(e=Ts(),Ja.lanes|=e,fs|=e,t):(qo=!0,e.memoizedState=n)}function uo(e,t,n,r,a){var l=B.p;B.p=0!==l&&8>l?l:8;var o,i,u,s=N.T,c={};N.T=c,ko(e,!1,t,n);try{var f=a(),d=N.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?wo(e,t,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),Ns()):wo(e,t,r,Ns())}catch(n){wo(e,t,{then:function(){},status:"rejected",reason:n},Ns())}finally{B.p=l,N.T=s}}function so(){}function co(e,t,n,r){if(5!==e.tag)throw Error(o(476));var a=fo(e).queue;uo(e,a,t,H,null===n?so:function(){return po(e),n(r)})}function fo(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:H,baseState:H,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:xl,lastRenderedState:H},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:xl,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function po(e){wo(e,fo(e).next.queue,{},Ns())}function ho(){return Ci(If)}function mo(){return bl().memoizedState}function go(){return bl().memoizedState}function vo(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Ns(),r=Li(t,e=Ti(n),n);return null!==r&&(Ls(r,0,n),Ri(r,t,n)),t={cache:$a()},void(e.payload=t)}t=t.return}}function yo(e,t,n){var r=Ns();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},So(e)?xo(t,n):null!==(n=zr(e,t,n,r))&&(Ls(n,0,r),Eo(n,t,r))}function bo(e,t,n){wo(e,t,n,Ns())}function wo(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(So(e))xo(t,a);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=l(o,n);if(a.hasEagerState=!0,a.eagerState=i,Gn(i,o))return Pr(e,t,a,0),null===ts&&_r(),!1}catch(e){}if(null!==(n=zr(e,t,a,r)))return Ls(n,0,r),Eo(n,t,r),!0}return!1}function ko(e,t,n,r){if(r={lane:2,revertLane:kc(),action:r,hasEagerState:!1,eagerState:null,next:null},So(e)){if(t)throw Error(o(479))}else null!==(t=zr(e,n,r,2))&&Ls(t,0,2)}function So(e){var t=e.alternate;return e===Ja||null!==t&&t===Ja}function xo(e,t){rl=nl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Eo(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Oe(e,n)}}var Co={readContext:Ci,use:kl,useCallback:sl,useContext:sl,useEffect:sl,useImperativeHandle:sl,useLayoutEffect:sl,useInsertionEffect:sl,useMemo:sl,useReducer:sl,useRef:sl,useState:sl,useDebugValue:sl,useDeferredValue:sl,useTransition:sl,useSyncExternalStore:sl,useId:sl};Co.useCacheRefresh=sl,Co.useMemoCache=sl,Co.useHostTransitionStatus=sl,Co.useFormState=sl,Co.useActionState=sl,Co.useOptimistic=sl;var _o={readContext:Ci,use:kl,useCallback:function(e,t){return yl().memoizedState=[e,void 0===t?null:t],e},useContext:Ci,useEffect:Xl,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Yl(4194308,4,to.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Yl(4194308,4,e,t)},useInsertionEffect:function(e,t){Yl(4,2,e,t)},useMemo:function(e,t){var n=yl();t=void 0===t?null:t;var r=e();if(al){be(!0);try{e()}finally{be(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=yl();if(void 0!==n){var a=n(t);if(al){be(!0);try{n(t)}finally{be(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=yo.bind(null,Ja,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yl().memoizedState=e},useState:function(e){var t=(e=Rl(e)).queue,n=bo.bind(null,Ja,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:ro,useDeferredValue:function(e,t){return oo(yl(),e,t)},useTransition:function(){var e=Rl(!1);return e=uo.bind(null,Ja,e.queue,!0,!1),yl().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Ja,a=yl();if(Kr){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===ts)throw Error(o(349));60&rs||zl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Xl(Nl.bind(null,r,l,e),[e]),r.flags|=2048,Ql(9,jl.bind(null,r,l,n,t),{destroy:void 0},null),n},useId:function(){var e=yl(),t=ts.identifierPrefix;if(Kr){var n=Hr;t=":"+t+"R"+(n=(Br&~(1<<32-we(Br)-1)).toString(32)+n),0<(n=ll++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ul++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return yl().memoizedState=vo.bind(null,Ja)}};_o.useMemoCache=Sl,_o.useHostTransitionStatus=ho,_o.useFormState=Bl,_o.useActionState=Bl,_o.useOptimistic=function(e){var t=yl();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=ko.bind(null,Ja,!0,n),n.dispatch=t,[e,t]};var Po={readContext:Ci,use:kl,useCallback:ao,useContext:Ci,useEffect:Zl,useImperativeHandle:no,useInsertionEffect:Jl,useLayoutEffect:eo,useMemo:lo,useReducer:El,useRef:Gl,useState:function(){return El(xl)},useDebugValue:ro,useDeferredValue:function(e,t){return io(bl(),el.memoizedState,e,t)},useTransition:function(){var e=El(xl)[0],t=bl().memoizedState;return["boolean"==typeof e?e:wl(e),t]},useSyncExternalStore:Pl,useId:mo};Po.useCacheRefresh=go,Po.useMemoCache=Sl,Po.useHostTransitionStatus=ho,Po.useFormState=Hl,Po.useActionState=Hl,Po.useOptimistic=function(e,t){return Ol(bl(),0,e,t)};var zo={readContext:Ci,use:kl,useCallback:ao,useContext:Ci,useEffect:Zl,useImperativeHandle:no,useInsertionEffect:Jl,useLayoutEffect:eo,useMemo:lo,useReducer:_l,useRef:Gl,useState:function(){return _l(xl)},useDebugValue:ro,useDeferredValue:function(e,t){var n=bl();return null===el?oo(n,e,t):io(n,el.memoizedState,e,t)},useTransition:function(){var e=_l(xl)[0],t=bl().memoizedState;return["boolean"==typeof e?e:wl(e),t]},useSyncExternalStore:Pl,useId:mo};function jo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:T({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}zo.useCacheRefresh=go,zo.useMemoCache=Sl,zo.useHostTransitionStatus=ho,zo.useFormState=Wl,zo.useActionState=Wl,zo.useOptimistic=function(e,t){var n=bl();return null!==el?Ol(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var No={isMounted:function(e){return!!(e=e._reactInternals)&&I(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ns(),a=Ti(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=Li(e,a,r))&&(Ls(t,0,r),Ri(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ns(),a=Ti(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Li(e,a,r))&&(Ls(t,0,r),Ri(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ns(),r=Ti(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=Li(e,r,n))&&(Ls(t,0,n),Ri(t,e,n))}};function To(e,t,n,r,a,l,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,o):!(t.prototype&&t.prototype.isPureReactComponent&&Yn(n,r)&&Yn(a,l))}function Lo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&No.enqueueReplaceState(t,t.state,null)}function Ro(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=T({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var Oo="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Ao(e){Oo(e)}function Fo(e){console.error(e)}function Io(e){Oo(e)}function Do(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Mo(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function $o(e,t,n){return(n=Ti(n)).tag=3,n.payload={element:null},n.callback=function(){Do(e,t)},n}function Uo(e){return(e=Ti(e)).tag=3,e}function Bo(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var l=r.value;e.payload=function(){return a(l)},e.callback=function(){Mo(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){Mo(t,n,r),"function"!=typeof a&&(null===Ss?Ss=new Set([this]):Ss.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Ho=Error(o(461)),qo=!1;function Vo(e,t,n,r){t.child=null===e?Sa(t,null,n,r):ka(t,e.child,n,r)}function Wo(e,t,n,r,a){n=n.render;var l=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return Ei(t),r=fl(e,t,n,o,l,a),i=ml(),null===e||qo?(Kr&&i&&Wr(t),t.flags|=1,Vo(e,t,r,a),t.child):(gl(e,t,a),di(e,t,a))}function Qo(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||Fu(l)||void 0!==l.defaultProps||null!==n.compare?((e=Mu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Go(e,t,l,r,a))}if(l=e.child,!pi(e,a)){var o=l.memoizedProps;if((n=null!==(n=n.compare)?n:Yn)(o,r)&&e.ref===t.ref)return di(e,t,a)}return t.flags|=1,(e=Iu(l,r)).ref=t.ref,e.return=t,t.child=e}function Go(e,t,n,r,a){if(null!==e){var l=e.memoizedProps;if(Yn(l,r)&&e.ref===t.ref){if(qo=!1,t.pendingProps=r=l,!pi(e,a))return t.lanes=e.lanes,di(e,t,a);131072&e.flags&&(qo=!0)}}return Zo(e,t,n,r,a)}function Yo(e,t,n){var r=t.pendingProps,a=r.children,l=!!(2&t.stateNode._pendingVisibility),o=null!==e?e.memoizedState:null;if(Xo(e,t),"hidden"===r.mode||l){if(128&t.flags){if(r=null!==o?o.baseLanes|n:n,null!==e){for(a=t.child=e.child,l=0;null!==a;)l=l|a.lanes|a.childLanes,a=a.sibling;t.childLanes=l&~r}else t.childLanes=0,t.child=null;return Ko(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Ko(e,t,null!==o?o.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Ka(0,null!==o?o.cachePool:null),null!==o?Ca(t,o):_a(),Ta(t)}else null!==o?(Ka(0,o.cachePool),Ca(t,o),La(),t.memoizedState=null):(null!==e&&Ka(0,null),_a(),La());return Vo(e,t,a,n),t.child}function Ko(e,t,n,r){var a=Ya();return a=null===a?null:{parent:Ma._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&Ka(0,null),_a(),Ta(t),null!==e&&Si(e,t,r,!0),null}function Xo(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Zo(e,t,n,r,a){return Ei(t),n=fl(e,t,n,r,void 0,a),r=ml(),null===e||qo?(Kr&&r&&Wr(t),t.flags|=1,Vo(e,t,n,a),t.child):(gl(e,t,a),di(e,t,a))}function Jo(e,t,n,r,a,l){return Ei(t),t.updateQueue=null,n=pl(t,r,n,a),dl(e),r=ml(),null===e||qo?(Kr&&r&&Wr(t),t.flags|=1,Vo(e,t,n,l),t.child):(gl(e,t,l),di(e,t,l))}function ei(e,t,n,r,a){if(Ei(t),null===t.stateNode){var l=Lr,o=n.contextType;"object"==typeof o&&null!==o&&(l=Ci(o)),l=new n(r,l),t.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,l.updater=No,t.stateNode=l,l._reactInternals=t,(l=t.stateNode).props=r,l.state=t.memoizedState,l.refs={},ji(t),o=n.contextType,l.context="object"==typeof o&&null!==o?Ci(o):Lr,l.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(jo(t,n,o,r),l.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(o=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),o!==l.state&&No.enqueueReplaceState(l,l.state,null),Ii(t,r,l,a),Fi(),l.state=t.memoizedState),"function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){l=t.stateNode;var i=t.memoizedProps,u=Ro(n,i);l.props=u;var s=l.context,c=n.contextType;o=Lr,"object"==typeof c&&null!==c&&(o=Ci(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i||s!==o)&&Lo(t,l,r,o),zi=!1;var d=t.memoizedState;l.state=d,Ii(t,r,l,a),Fi(),s=t.memoizedState,i||d!==s||zi?("function"==typeof f&&(jo(t,n,f,r),s=t.memoizedState),(u=zi||To(t,n,u,r,d,s,o))?(c||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),l.props=r,l.state=s,l.context=o,r=u):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,Ni(e,t),c=Ro(n,o=t.memoizedProps),l.props=c,f=t.pendingProps,d=l.context,s=n.contextType,u=Lr,"object"==typeof s&&null!==s&&(u=Ci(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(o!==f||d!==u)&&Lo(t,l,r,u),zi=!1,d=t.memoizedState,l.state=d,Ii(t,r,l,a),Fi();var p=t.memoizedState;o!==f||d!==p||zi||null!==e&&null!==e.dependencies&&xi(e.dependencies)?("function"==typeof i&&(jo(t,n,i,r),p=t.memoizedState),(c=zi||To(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&xi(e.dependencies))?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,p,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),l.props=r,l.state=p,l.context=u,r=c):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return l=r,Xo(e,t),r=!!(128&t.flags),l||r?(l=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:l.render(),t.flags|=1,null!==e&&r?(t.child=ka(t,e.child,null,a),t.child=ka(t,null,n,a)):Vo(e,t,n,a),t.memoizedState=l.state,e=t.child):e=di(e,t,a),e}function ti(e,t,n,r){return aa(),t.flags|=256,Vo(e,t,n,r),t.child}var ni={dehydrated:null,treeContext:null,retryLane:0};function ri(e){return{baseLanes:e,cachePool:Xa()}}function ai(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=hs),e}function li(e,t,n){var r,a=t.pendingProps,l=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&Oa.current)),r&&(l=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Kr){if(l?Na(t):La(),Kr){var u,s=Yr;if(u=s){e:{for(u=s,s=Zr;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=uf(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==Ur?{id:Br,overflow:Hr}:null,retryLane:536870912},(u=Au(18,null,null,0)).stateNode=s,u.return=t,t.child=u,Gr=t,Yr=null,u=!0):u=!1}u||ea(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return"$!"===s.data?t.lanes=16:t.lanes=536870912,null;Ra(t)}return s=a.children,a=a.fallback,l?(La(),s=ii({mode:"hidden",children:s},l=t.mode),a=$u(a,l,n,null),s.return=t,a.return=t,s.sibling=a,t.child=s,(l=t.child).memoizedState=ri(n),l.childLanes=ai(e,r,n),t.memoizedState=ni,a):(Na(t),oi(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(Na(t),t.flags&=-257,t=ui(e,t,n)):null!==t.memoizedState?(La(),t.child=e.child,t.flags|=128,t=null):(La(),l=a.fallback,s=t.mode,a=ii({mode:"visible",children:a.children},s),(l=$u(l,s,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,ka(t,e.child,null,n),(a=t.child).memoizedState=ri(n),a.childLanes=ai(e,r,n),t.memoizedState=ni,t=l);else if(Na(t),"$!"===s.data){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(a=Error(o(419))).stack="",a.digest=r,la({value:a,source:null,stack:null}),t=ui(e,t,n)}else if(qo||Si(e,t,n,!1),r=!!(n&e.childLanes),qo||r){if(null!==(r=ts)){if(42&(a=n&-n))a=1;else switch(a){case 2:a=1;break;case 8:a=4;break;case 32:a=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:a=64;break;case 268435456:a=134217728;break;default:a=0}if(0!==(a=a&(r.suspendedLanes|n)?0:a)&&a!==u.retryLane)throw u.retryLane=a,jr(e,a),Ls(r,0,a),Ho}"$?"===s.data||qs(),t=ui(e,t,n)}else"$?"===s.data?(t.flags|=128,t.child=e.child,t=ic.bind(null,e),s._reactRetry=t,t=null):(e=u.treeContext,Yr=uf(s.nextSibling),Gr=t,Kr=!0,Xr=null,Zr=!1,null!==e&&(Mr[$r++]=Br,Mr[$r++]=Hr,Mr[$r++]=Ur,Br=e.id,Hr=e.overflow,Ur=t),(t=oi(t,a.children)).flags|=4096);return t}return l?(La(),l=a.fallback,s=t.mode,c=(u=e.child).sibling,(a=Iu(u,{mode:"hidden",children:a.children})).subtreeFlags=31457280&u.subtreeFlags,null!==c?l=Iu(c,l):(l=$u(l,s,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,null===(s=e.child.memoizedState)?s=ri(n):(null!==(u=s.cachePool)?(c=Ma._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Xa(),s={baseLanes:s.baseLanes|n,cachePool:u}),l.memoizedState=s,l.childLanes=ai(e,r,n),t.memoizedState=ni,a):(Na(t),e=(n=e.child).sibling,(n=Iu(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function oi(e,t){return(t=ii({mode:"visible",children:t},e.mode)).return=e,e.child=t}function ii(e,t){return Uu(e,t,0,null)}function ui(e,t,n){return ka(t,e.child,null,n),(e=oi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function si(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),wi(e.return,t,n)}function ci(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function fi(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(Vo(e,t,r.children,n),2&(r=Oa.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&si(e,n,t);else if(19===e.tag)si(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(G(Oa,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Aa(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),ci(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Aa(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}ci(t,!0,n,null,l);break;case"together":ci(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function di(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),fs|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Si(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Iu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Iu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function pi(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!xi(e))}function hi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)qo=!0;else{if(!(pi(e,n)||128&t.flags))return qo=!1,function(e,t,n){switch(t.tag){case 3:J(t,t.stateNode.containerInfo),yi(0,Ma,e.memoizedState.cache),aa();break;case 27:case 5:te(t);break;case 4:J(t,t.stateNode.containerInfo);break;case 10:yi(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(Na(t),t.flags|=128,null):n&t.child.childLanes?li(e,t,n):(Na(t),null!==(e=di(e,t,n))?e.sibling:null);Na(t);break;case 19:var a=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Si(e,t,n,!1),r=!!(n&t.childLanes)),a){if(r)return fi(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),G(Oa,Oa.current),r)break;return null;case 22:case 23:return t.lanes=0,Yo(e,t,n);case 24:yi(0,Ma,e.memoizedState.cache)}return di(e,t,n)}(e,t,n);qo=!!(131072&e.flags)}else qo=!1,Kr&&1048576&t.flags&&Vr(t,Dr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===v){t.tag=11,t=Wo(null,t,r,e,n);break e}if(a===w){t.tag=14,t=Qo(null,t,r,e,n);break e}}throw t=P(r)||r,Error(o(306,t,""))}Fu(r)?(e=Ro(r,e),t.tag=1,t=ei(null,t,r,e,n)):(t.tag=0,t=Zo(null,t,r,e,n))}return t;case 0:return Zo(e,t,t.type,t.pendingProps,n);case 1:return ei(e,t,r=t.type,a=Ro(r,t.pendingProps),n);case 3:e:{if(J(t,t.stateNode.containerInfo),null===e)throw Error(o(387));var l=t.pendingProps;r=(a=t.memoizedState).element,Ni(e,t),Ii(t,l,null,n);var i=t.memoizedState;if(l=i.cache,yi(0,Ma,l),l!==a.cache&&ki(t,[Ma],n,!0),Fi(),l=i.element,a.isDehydrated){if(a={element:l,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=ti(e,t,l,n);break e}if(l!==r){la(r=Or(Error(o(424)),t)),t=ti(e,t,l,n);break e}for(Yr=uf(t.stateNode.containerInfo.firstChild),Gr=t,Kr=!0,Xr=null,Zr=!0,n=Sa(t,null,l,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(aa(),l===r){t=di(e,t,n);break e}Vo(e,t,l,n)}t=t.child}return t;case 26:return Xo(e,t),null===e?(n=vf(t.type,null,t.pendingProps,null))?t.memoizedState=n:Kr||(n=t.type,e=t.pendingProps,(r=Yc(X.current).createElement(n))[De]=t,r[Me]=e,Wc(r,n,e),Xe(r),t.stateNode=r):t.memoizedState=vf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return te(t),null===e&&Kr&&(r=t.stateNode=cf(t.type,t.pendingProps,X.current),Gr=t,Zr=!0,Yr=uf(r.firstChild)),r=t.pendingProps.children,null!==e||Kr?Vo(e,t,r,n):t.child=ka(t,null,r,n),Xo(e,t),t.child;case 5:return null===e&&Kr&&((a=r=Yr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ve])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(l=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(l!==a.rel||e.getAttribute("href")!==(null==a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((l=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&l&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var l=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===l)return e}if(null===(e=uf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Zr))?(t.stateNode=r,Gr=t,Yr=uf(r.firstChild),Zr=!1,a=!0):a=!1),a||ea(t)),te(t),a=t.type,l=t.pendingProps,i=null!==e?e.memoizedProps:null,r=l.children,Zc(a,l)?r=null:null!==i&&Zc(a,i)&&(t.flags|=32),null!==t.memoizedState&&(a=fl(e,t,hl,null,null,n),If._currentValue=a),Xo(e,t),Vo(e,t,r,n),t.child;case 6:return null===e&&Kr&&((e=n=Yr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=uf(e.nextSibling)))return null}return e}(n,t.pendingProps,Zr))?(t.stateNode=n,Gr=t,Yr=null,e=!0):e=!1),e||ea(t)),null;case 13:return li(e,t,n);case 4:return J(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ka(t,null,r,n):Vo(e,t,r,n),t.child;case 11:return Wo(e,t,t.type,t.pendingProps,n);case 7:return Vo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Vo(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,yi(0,t.type,r.value),Vo(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,Ei(t),r=r(a=Ci(a)),t.flags|=1,Vo(e,t,r,n),t.child;case 14:return Qo(e,t,t.type,t.pendingProps,n);case 15:return Go(e,t,t.type,t.pendingProps,n);case 19:return fi(e,t,n);case 22:return Yo(e,t,n);case 24:return Ei(t),r=Ci(Ma),null===e?(null===(a=Ya())&&(a=ts,l=$a(),a.pooledCache=l,l.refCount++,null!==l&&(a.pooledCacheLanes|=n),a=l),t.memoizedState={parent:r,cache:a},ji(t),yi(0,Ma,a)):(!!(e.lanes&n)&&(Ni(e,t),Ii(t,null,null,n),Fi()),a=e.memoizedState,l=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),yi(0,Ma,r)):(r=l.cache,yi(0,Ma,r),r!==a.cache&&ki(t,[Ma],n,!0))),Vo(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}var mi=W(null),gi=null,vi=null;function yi(e,t,n){G(mi,t._currentValue),t._currentValue=n}function bi(e){e._currentValue=mi.current,Q(mi)}function wi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ki(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var l=a.dependencies;if(null!==l){var i=a.child;l=l.firstContext;e:for(;null!==l;){var u=l;l=a;for(var s=0;s<t.length;s++)if(u.context===t[s]){l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),wi(l.return,n,e),r||(i=null);break e}l=u.next}}else if(18===a.tag){if(null===(i=a.return))throw Error(o(341));i.lanes|=n,null!==(l=i.alternate)&&(l.lanes|=n),wi(i,n,e),i=null}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===e){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}}function Si(e,t,n,r){e=null;for(var a=t,l=!1;null!==a;){if(!l)if(524288&a.flags)l=!0;else if(262144&a.flags)break;if(10===a.tag){var i=a.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=a.type;Gn(a.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(a===Z.current){if(null===(i=a.alternate))throw Error(o(387));i.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(If):e=[If])}a=a.return}null!==e&&ki(t,e,n,r),t.flags|=262144}function xi(e){for(e=e.firstContext;null!==e;){if(!Gn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Ei(e){gi=e,vi=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Ci(e){return Pi(gi,e)}function _i(e,t){return null===gi&&Ei(e),Pi(e,t)}function Pi(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===vi){if(null===e)throw Error(o(308));vi=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else vi=vi.next=t;return n}var zi=!1;function ji(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Ni(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Ti(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Li(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&es){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=Tr(e),Nr(e,null,n),t}return Pr(e,r,t,n),Tr(e)}function Ri(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Oe(e,n)}}function Oi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===l?a=l=o:l=l.next=o,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Ai=!1;function Fi(){if(Ai&&null!==Va)throw Va}function Ii(e,t,n,r){Ai=!1;var a=e.updateQueue;zi=!1;var l=a.firstBaseUpdate,o=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?l=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==l){var f=a.baseState;for(o=0,c=s=u=null,i=l;;){var d=-536870913&i.lane,p=d!==i.lane;if(p?(rs&d)===d:(r&d)===d){0!==d&&d===qa&&(Ai=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,m=i;d=t;var g=n;switch(m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(g,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(g,f,d):h))break e;f=T({},f,d);break e;case 2:zi=!0}}null!==(d=i.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=a.callbacks)?a.callbacks=[d]:p.push(d))}else p={lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,o|=d;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(p=i).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}null===c&&(u=f),a.baseState=u,a.firstBaseUpdate=s,a.lastBaseUpdate=c,null===l&&(a.shared.lanes=0),fs|=o,e.lanes=o,e.memoizedState=f}}function Di(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function Mi(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Di(n[e],t)}function $i(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var l=n.create,o=n.inst;r=l(),o.destroy=r}n=n.next}while(n!==a)}}catch(e){rc(t,t.return,e)}}function Ui(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var l=a.next;r=l;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,a=t;var u=n;try{i()}catch(e){rc(a,u,e)}}}r=r.next}while(r!==l)}}catch(e){rc(t,t.return,e)}}function Bi(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{Mi(t,n)}catch(t){rc(e,e.return,t)}}}function Hi(e,t,n){n.props=Ro(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){rc(e,t,n)}}function qi(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var a=r;break;default:a=r}"function"==typeof n?e.refCleanup=n(a):n.current=a}}catch(n){rc(e,t,n)}}function Vi(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){rc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){rc(e,t,n)}else n.current=null}function Wi(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){rc(e,e.return,t)}}function Qi(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,l=null,i=null,u=null,s=null,c=null,f=null;for(h in n){var d=n[h];if(n.hasOwnProperty(h)&&null!=d)switch(h){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(h)||qc(e,t,h,null,r,d)}}for(var p in r){var h=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=h||null!=d))switch(p){case"type":l=h;break;case"name":a=h;break;case"checked":c=h;break;case"defaultChecked":f=h;break;case"value":i=h;break;case"defaultValue":u=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(o(137,t));break;default:h!==d&&qc(e,t,p,h,r,d)}}return void gt(e,i,u,s,c,f,l,a);case"select":for(l in h=i=u=p=null,n)if(s=n[l],n.hasOwnProperty(l)&&null!=s)switch(l){case"value":break;case"multiple":h=s;default:r.hasOwnProperty(l)||qc(e,t,l,null,r,s)}for(a in r)if(l=r[a],s=n[a],r.hasOwnProperty(a)&&(null!=l||null!=s))switch(a){case"value":p=l;break;case"defaultValue":u=l;break;case"multiple":i=l;default:l!==s&&qc(e,t,a,l,r,s)}return t=u,n=i,r=h,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(u in h=p=null,n)if(a=n[u],n.hasOwnProperty(u)&&null!=a&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:qc(e,t,u,null,r,a)}for(i in r)if(a=r[i],l=n[i],r.hasOwnProperty(i)&&(null!=a||null!=l))switch(i){case"value":p=a;break;case"defaultValue":h=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(o(91));break;default:a!==l&&qc(e,t,i,a,r,l)}return void wt(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:qc(e,t,m,null,r,p));for(s in r)p=r[s],h=n[s],!r.hasOwnProperty(s)||p===h||null==p&&null==h||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:qc(e,t,s,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&qc(e,t,g,null,r,p);for(c in r)if(p=r[c],h=n[c],r.hasOwnProperty(c)&&p!==h&&(null!=p||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:qc(e,t,c,p,r,h)}return;default:if(_t(t)){for(var v in n)p=n[v],n.hasOwnProperty(v)&&void 0!==p&&!r.hasOwnProperty(v)&&Vc(e,t,v,void 0,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||void 0===p&&void 0===h||Vc(e,t,f,p,r,h);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&qc(e,t,y,null,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||null==p&&null==h||qc(e,t,d,p,r,h)}(r,e.type,n,t),r[Me]=t}catch(t){rc(e,e.return,t)}}function Gi(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Yi(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Gi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Ki(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Hc));else if(4!==r&&27!==r&&null!==(e=e.child))for(Ki(e,t,n),e=e.sibling;null!==e;)Ki(e,t,n),e=e.sibling}function Xi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Xi(e,t,n),e=e.sibling;null!==e;)Xi(e,t,n),e=e.sibling}var Zi=!1,Ji=!1,eu=!1,tu="function"==typeof WeakSet?WeakSet:Set,nu=null,ru=!1;function au(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:vu(e,n),4&r&&$i(5,n);break;case 1:if(vu(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){rc(n,n.return,e)}else{var a=Ro(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){rc(n,n.return,e)}}64&r&&Bi(n),512&r&&qi(n,n.return);break;case 3:if(vu(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{Mi(r,e)}catch(e){rc(n,n.return,e)}}break;case 26:vu(e,n),512&r&&qi(n,n.return);break;case 27:case 5:vu(e,n),null===t&&4&r&&Wi(n),512&r&&qi(n,n.return);break;case 12:default:vu(e,n);break;case 13:vu(e,n),4&r&&cu(e,n);break;case 22:if(!(a=null!==n.memoizedState||Zi)){t=null!==t&&null!==t.memoizedState||Ji;var l=Zi,o=Ji;Zi=a,(Ji=t)&&!o?bu(e,n,!!(8772&n.subtreeFlags)):vu(e,n),Zi=l,Ji=o}512&r&&("manual"===n.memoizedProps.mode?qi(n,n.return):Vi(n,n.return))}}function lu(e){var t=e.alternate;null!==t&&(e.alternate=null,lu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&We(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var ou=null,iu=!1;function uu(e,t,n){for(n=n.child;null!==n;)su(e,t,n),n=n.sibling}function su(e,t,n){if(ye&&"function"==typeof ye.onCommitFiberUnmount)try{ye.onCommitFiberUnmount(ve,n)}catch(e){}switch(n.tag){case 26:Ji||Vi(n,t),uu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Ji||Vi(n,t);var r=ou,a=iu;for(ou=n.stateNode,uu(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);We(n),ou=r,iu=a;break;case 5:Ji||Vi(n,t);case 6:a=ou;var l=iu;if(ou=null,uu(e,t,n),iu=l,null!==(ou=a))if(iu)try{e=ou,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){rc(n,t,e)}else try{ou.removeChild(n.stateNode)}catch(e){rc(n,t,e)}break;case 18:null!==ou&&(iu?(t=ou,n=n.stateNode,8===t.nodeType?lf(t.parentNode,n):1===t.nodeType&&lf(t,n),gd(t)):lf(ou,n.stateNode));break;case 4:r=ou,a=iu,ou=n.stateNode.containerInfo,iu=!0,uu(e,t,n),ou=r,iu=a;break;case 0:case 11:case 14:case 15:Ji||Ui(2,n,t),Ji||Ui(4,n,t),uu(e,t,n);break;case 1:Ji||(Vi(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Hi(n,t,r)),uu(e,t,n);break;case 21:uu(e,t,n);break;case 22:Ji||Vi(n,t),Ji=(r=Ji)||null!==n.memoizedState,uu(e,t,n),Ji=r;break;default:uu(e,t,n)}}function cu(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{gd(e)}catch(e){rc(t,t.return,e)}}function fu(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new tu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new tu),t;default:throw Error(o(435,e.tag))}}(e);t.forEach((function(t){var r=uc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function du(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:case 5:ou=u.stateNode,iu=!1;break e;case 3:case 4:ou=u.stateNode.containerInfo,iu=!0;break e}u=u.return}if(null===ou)throw Error(o(160));su(l,i,a),ou=null,iu=!1,null!==(l=a.alternate)&&(l.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)hu(t,e),t=t.sibling}var pu=null;function hu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:du(t,e),mu(e),4&r&&(Ui(3,e,e.return),$i(3,e),Ui(5,e,e.return));break;case 1:du(t,e),mu(e),512&r&&(Ji||null===n||Vi(n,n.return)),64&r&&Zi&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=pu;if(du(t,e),mu(e),512&r&&(Ji||null===n||Vi(n,n.return)),4&r){var l=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(l=a.getElementsByTagName("title")[0])||l[Ve]||l[De]||"http://www.w3.org/2000/svg"===l.namespaceURI||l.hasAttribute("itemprop"))&&(l=a.createElement(r),a.head.insertBefore(l,a.querySelector("head > title"))),Wc(l,r,n),l[De]=e,Xe(l),r=l;break e;case"link":var i=zf("link","href",a).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((l=i[u]).getAttribute("href")===(null==n.href?null:n.href)&&l.getAttribute("rel")===(null==n.rel?null:n.rel)&&l.getAttribute("title")===(null==n.title?null:n.title)&&l.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}Wc(l=a.createElement(r),r,n),a.head.appendChild(l);break;case"meta":if(i=zf("meta","content",a).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((l=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&l.getAttribute("name")===(null==n.name?null:n.name)&&l.getAttribute("property")===(null==n.property?null:n.property)&&l.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&l.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}Wc(l=a.createElement(r),r,n),a.head.appendChild(l);break;default:throw Error(o(468,r))}l[De]=e,Xe(l),r=l}e.stateNode=r}else jf(a,e.type,e.stateNode);else e.stateNode=xf(a,r,e.memoizedProps);else l!==r?(null===l?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):l.count--,null===r?jf(a,e.type,e.stateNode):xf(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&Qi(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){a=e.stateNode,l=e.memoizedProps;try{for(var s=a.firstChild;s;){var c=s.nextSibling,f=s.nodeName;s[Ve]||"HEAD"===f||"BODY"===f||"SCRIPT"===f||"STYLE"===f||"LINK"===f&&"stylesheet"===s.rel.toLowerCase()||a.removeChild(s),s=c}for(var d=e.type,p=a.attributes;p.length;)a.removeAttributeNode(p[0]);Wc(a,d,l),a[De]=e,a[Me]=l}catch(t){rc(e,e.return,t)}}case 5:if(du(t,e),mu(e),512&r&&(Ji||null===n||Vi(n,n.return)),32&e.flags){a=e.stateNode;try{St(a,"")}catch(t){rc(e,e.return,t)}}4&r&&null!=e.stateNode&&Qi(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(eu=!0);break;case 6:if(du(t,e),mu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){rc(e,e.return,t)}}break;case 3:if(Pf=null,a=pu,pu=pf(t.containerInfo),du(t,e),pu=a,mu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{gd(t.containerInfo)}catch(t){rc(e,e.return,t)}eu&&(eu=!1,gu(e));break;case 4:r=pu,pu=pf(e.stateNode.containerInfo),du(t,e),mu(e),pu=r;break;case 12:du(t,e),mu(e);break;case 13:du(t,e),mu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(bs=ue()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,fu(e,r));break;case 22:if(512&r&&(Ji||null===n||Vi(n,n.return)),s=null!==e.memoizedState,c=null!==n&&null!==n.memoizedState,Zi=(f=Zi)||s,Ji=(d=Ji)||c,du(t,e),Ji=d,Zi=f,mu(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=s?-2&t._visibility:1|t._visibility,s&&(t=Zi||Ji,null===n||c||t||yu(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){c=n=t;try{if(a=c.stateNode,s)"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{i=c.stateNode;var h=null!=(u=c.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null;i.style.display=null==h||"boolean"==typeof h?"":(""+h).trim()}}catch(e){rc(c,c.return,e)}}}else if(6===t.tag){if(null===n){c=t;try{c.stateNode.nodeValue=s?"":c.memoizedProps}catch(e){rc(c,c.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,fu(e,n));break;case 19:du(t,e),mu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,fu(e,r));break;case 21:break;default:du(t,e),mu(e)}}function mu(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Gi(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 27:var a=r.stateNode;Xi(e,Yi(e),a);break;case 5:var l=r.stateNode;32&r.flags&&(St(l,""),r.flags&=-33),Xi(e,Yi(e),l);break;case 3:case 4:var i=r.stateNode.containerInfo;Ki(e,Yi(e),i);break;default:throw Error(o(161))}}}catch(t){rc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gu(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;gu(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function vu(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)au(e,t.alternate,t),t=t.sibling}function yu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Ui(4,t,t.return),yu(t);break;case 1:Vi(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&Hi(t,t.return,n),yu(t);break;case 26:case 27:case 5:Vi(t,t.return),yu(t);break;case 22:Vi(t,t.return),null===t.memoizedState&&yu(t);break;default:yu(t)}e=e.sibling}}function bu(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,l=t,o=l.flags;switch(l.tag){case 0:case 11:case 15:bu(a,l,n),$i(4,l);break;case 1:if(bu(a,l,n),"function"==typeof(a=(r=l).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){rc(r,r.return,e)}if(null!==(a=(r=l).updateQueue)){var i=r.stateNode;try{var u=a.shared.hiddenCallbacks;if(null!==u)for(a.shared.hiddenCallbacks=null,a=0;a<u.length;a++)Di(u[a],i)}catch(e){rc(r,r.return,e)}}n&&64&o&&Bi(l),qi(l,l.return);break;case 26:case 27:case 5:bu(a,l,n),n&&null===r&&4&o&&Wi(l),qi(l,l.return);break;case 12:default:bu(a,l,n);break;case 13:bu(a,l,n),n&&4&o&&cu(a,l);break;case 22:null===l.memoizedState&&bu(a,l,n),qi(l,l.return)}t=t.sibling}}function wu(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Ua(n))}function ku(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ua(e))}function Su(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)xu(e,t,n,r),t=t.sibling}function xu(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:Su(e,t,n,r),2048&a&&$i(9,t);break;case 3:Su(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ua(e)));break;case 12:if(2048&a){Su(e,t,n,r),e=t.stateNode;try{var l=t.memoizedProps,o=l.id,i=l.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){rc(t,t.return,e)}}else Su(e,t,n,r);break;case 23:break;case 22:l=t.stateNode,null!==t.memoizedState?4&l._visibility?Su(e,t,n,r):Cu(e,t):4&l._visibility?Su(e,t,n,r):(l._visibility|=4,Eu(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&wu(t.alternate,t);break;case 24:Su(e,t,n,r),2048&a&&ku(t.alternate,t);break;default:Su(e,t,n,r)}}function Eu(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var l=e,o=t,i=n,u=r,s=o.flags;switch(o.tag){case 0:case 11:case 15:Eu(l,o,i,u,a),$i(8,o);break;case 23:break;case 22:var c=o.stateNode;null!==o.memoizedState?4&c._visibility?Eu(l,o,i,u,a):Cu(l,o):(c._visibility|=4,Eu(l,o,i,u,a)),a&&2048&s&&wu(o.alternate,o);break;case 24:Eu(l,o,i,u,a),a&&2048&s&&ku(o.alternate,o);break;default:Eu(l,o,i,u,a)}t=t.sibling}}function Cu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:Cu(n,r),2048&a&&wu(r.alternate,r);break;case 24:Cu(n,r),2048&a&&ku(r.alternate,r);break;default:Cu(n,r)}t=t.sibling}}var _u=8192;function Pu(e){if(e.subtreeFlags&_u)for(e=e.child;null!==e;)zu(e),e=e.sibling}function zu(e){switch(e.tag){case 26:Pu(e),e.flags&_u&&null!==e.memoizedState&&function(e,t,n){if(null===Tf)throw Error(o(475));var r=Tf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=yf(n.href),l=e.querySelector(bf(a));if(l)return null!==(e=l._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Rf.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=l,void Xe(l);l=e.ownerDocument||e,n=wf(n),(a=ff.get(a))&&Cf(n,a),Xe(l=l.createElement("link"));var i=l;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Wc(l,"link",n),t.instance=l}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Rf.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(pu,e.memoizedState,e.memoizedProps);break;case 5:default:Pu(e);break;case 3:case 4:var t=pu;pu=pf(e.stateNode.containerInfo),Pu(e),pu=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=_u,_u=16777216,Pu(e),_u=t):Pu(e))}}function ju(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Nu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];nu=r,Ru(r,e)}ju(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Tu(e),e=e.sibling}function Tu(e){switch(e.tag){case 0:case 11:case 15:Nu(e),2048&e.flags&&Ui(9,e,e.return);break;case 3:case 12:default:Nu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,Lu(e)):Nu(e)}}function Lu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];nu=r,Ru(r,e)}ju(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Ui(8,t,t.return),Lu(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,Lu(t));break;default:Lu(t)}e=e.sibling}}function Ru(e,t){for(;null!==nu;){var n=nu;switch(n.tag){case 0:case 11:case 15:Ui(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Ua(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,nu=r;else e:for(n=e;null!==nu;){var a=(r=nu).sibling,l=r.return;if(lu(r),r===n){nu=null;break e}if(null!==a){a.return=l,nu=a;break e}nu=l}}}function Ou(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Au(e,t,n,r){return new Ou(e,t,n,r)}function Fu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Iu(e,t){var n=e.alternate;return null===n?((n=Au(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Du(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Mu(e,t,n,r,a,l){var i=0;if(r=e,"function"==typeof e)Fu(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,Y.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case f:return $u(n.children,a,l,t);case d:i=8,a|=24;break;case p:return(e=Au(12,n,t,2|a)).elementType=p,e.lanes=l,e;case y:return(e=Au(13,n,t,a)).elementType=y,e.lanes=l,e;case b:return(e=Au(19,n,t,a)).elementType=b,e.lanes=l,e;case S:return Uu(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case h:case g:i=10;break e;case m:i=9;break e;case v:i=11;break e;case w:i=14;break e;case k:i=16,r=null;break e}i=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Au(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function $u(e,t,n,r){return(e=Au(7,e,r,t)).lanes=n,e}function Uu(e,t,n,r){(e=Au(22,e,r,t)).elementType=S,e.lanes=n;var a={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=a._current;if(null===e)throw Error(o(456));if(!(2&a._pendingVisibility)){var t=jr(e,2);null!==t&&(a._pendingVisibility|=2,Ls(t,0,2))}},attach:function(){var e=a._current;if(null===e)throw Error(o(456));if(2&a._pendingVisibility){var t=jr(e,2);null!==t&&(a._pendingVisibility&=-3,Ls(t,0,2))}}};return e.stateNode=a,e}function Bu(e,t,n){return(e=Au(6,e,null,t)).lanes=n,e}function Hu(e,t,n){return(t=Au(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qu(e){e.flags|=4}function Vu(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Nf(t)){if(null!==(t=za.current)&&((4194176&rs)===rs?null!==ja:(62914560&rs)!==rs&&!(536870912&rs)||t!==ja))throw da=ua,ia;e.flags|=8192}}function Wu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Ne():536870912,e.lanes|=t,ms|=t)}function Qu(e,t){if(!Kr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=31457280&a.subtreeFlags,r|=31457280&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Yu(e,t,n){var r=t.pendingProps;switch(Qr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Gu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),bi(Ma),ee(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(ra(t)?qu(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Xr&&(Os(Xr),Xr=null))),Gu(t),null;case 26:return n=t.memoizedState,null===e?(qu(t),null!==n?(Gu(t),Vu(t,n)):(Gu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(qu(t),Gu(t),Vu(t,n)):(Gu(t),t.flags&=-16777217):(e.memoizedProps!==r&&qu(t),Gu(t),t.flags&=-16777217),null;case 27:ne(t),n=X.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&qu(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Gu(t),null}e=Y.current,ra(t)?ta(t):(e=cf(a,r,n),t.stateNode=e,qu(t))}return Gu(t),null;case 5:if(ne(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&qu(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Gu(t),null}if(e=Y.current,ra(t))ta(t);else{switch(a=Yc(X.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[De]=t,e[Me]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(Wc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&qu(t)}}return Gu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&qu(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=X.current,ra(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=Gr))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[De]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Bc(e.nodeValue,n)))||ea(t)}else(e=Yc(e).createTextNode(r))[De]=t,t.stateNode=e}return Gu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=ra(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[De]=t}else aa(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Gu(t),a=!1}else null!==Xr&&(Os(Xr),Xr=null),a=!0;if(!a)return 256&t.flags?(Ra(t),t):(Ra(t),null)}if(Ra(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var l=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(l=r.memoizedState.cachePool.pool),l!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Wu(t,t.updateQueue),Gu(t),null;case 4:return ee(),null===e&&Lc(t.stateNode.containerInfo),Gu(t),null;case 10:return bi(t.type),Gu(t),null;case 19:if(Q(Oa),null===(a=t.memoizedState))return Gu(t),null;if(r=!!(128&t.flags),null===(l=a.rendering))if(r)Qu(a,!1);else{if(0!==cs||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=Aa(e))){for(t.flags|=128,Qu(a,!1),e=l.updateQueue,t.updateQueue=e,Wu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Du(n,e),n=n.sibling;return G(Oa,1&Oa.current|2),t.child}e=e.sibling}null!==a.tail&&ue()>ws&&(t.flags|=128,r=!0,Qu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Aa(l))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Wu(t,e),Qu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!Kr)return Gu(t),null}else 2*ue()-a.renderingStartTime>ws&&536870912!==n&&(t.flags|=128,r=!0,Qu(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(e=a.last)?e.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=ue(),t.sibling=null,e=Oa.current,G(Oa,r?1&e|2:1&e),t):(Gu(t),null);case 22:case 23:return Ra(t),Pa(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(Gu(t),6&t.subtreeFlags&&(t.flags|=8192)):Gu(t),null!==(n=t.updateQueue)&&Wu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&Q(Ga),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),bi(Ma),Gu(t),null;case 25:return null}throw Error(o(156,t.tag))}function Ku(e,t){switch(Qr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return bi(Ma),ee(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return ne(t),null;case 13:if(Ra(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));aa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Q(Oa),null;case 4:return ee(),null;case 10:return bi(t.type),null;case 22:case 23:return Ra(t),Pa(),null!==e&&Q(Ga),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return bi(Ma),null;default:return null}}function Xu(e,t){switch(Qr(t),t.tag){case 3:bi(Ma),ee();break;case 26:case 27:case 5:ne(t);break;case 4:ee();break;case 13:Ra(t);break;case 19:Q(Oa);break;case 10:bi(t.type);break;case 22:case 23:Ra(t),Pa(),null!==e&&Q(Ga);break;case 24:bi(Ma)}}var Zu={getCacheForType:function(e){var t=Ci(Ma),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Ju="function"==typeof WeakMap?WeakMap:Map,es=0,ts=null,ns=null,rs=0,as=0,ls=null,os=!1,is=!1,us=!1,ss=0,cs=0,fs=0,ds=0,ps=0,hs=0,ms=0,gs=null,vs=null,ys=!1,bs=0,ws=1/0,ks=null,Ss=null,xs=!1,Es=null,Cs=0,_s=0,Ps=null,zs=0,js=null;function Ns(){return 2&es&&0!==rs?rs&-rs:null!==N.T?0!==qa?qa:kc():Fe()}function Ts(){0===hs&&(hs=536870912&rs&&!Kr?536870912:je());var e=za.current;return null!==e&&(e.flags|=32),hs}function Ls(e,t,n){(e===ts&&2===as||null!==e.cancelPendingCommit)&&($s(e,0),Is(e,rs,hs,!1)),Le(e,n),2&es&&e===ts||(e===ts&&(!(2&es)&&(ds|=n),4===cs&&Is(e,rs,hs,!1)),mc(e))}function Rs(e,t,n){if(6&es)throw Error(o(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||Pe(e,t),a=r?function(e,t){var n=es;es|=2;var r=Bs(),a=Hs();ts!==e||rs!==t?(ks=null,ws=ue()+500,$s(e,t)):is=Pe(e,t);e:for(;;)try{if(0!==as&&null!==ns){t=ns;var l=ls;t:switch(as){case 1:as=0,ls=null,Ks(e,t,l,1);break;case 2:if(sa(l)){as=0,ls=null,Ys(t);break}t=function(){2===as&&ts===e&&(as=7),mc(e)},l.then(t,t);break e;case 3:as=7;break e;case 4:as=5;break e;case 7:sa(l)?(as=0,ls=null,Ys(t)):(as=0,ls=null,Ks(e,t,l,7));break;case 5:var i=null;switch(ns.tag){case 26:i=ns.memoizedState;case 5:case 27:var u=ns;if(!i||Nf(i)){as=0,ls=null;var s=u.sibling;if(null!==s)ns=s;else{var c=u.return;null!==c?(ns=c,Xs(c)):ns=null}break t}}as=0,ls=null,Ks(e,t,l,5);break;case 6:as=0,ls=null,Ks(e,t,l,6);break;case 8:Ms(),cs=6;break e;default:throw Error(o(462))}}Qs();break}catch(t){Us(e,t)}return vi=gi=null,N.H=r,N.A=a,es=n,null!==ns?0:(ts=null,rs=0,_r(),cs)}(e,t):Vs(e,t,!0),l=r;;){if(0===a){is&&!r&&Is(e,t,0,!1);break}if(6===a)Is(e,t,0,!os);else{if(n=e.current.alternate,l&&!Fs(n)){a=Vs(e,t,!1),l=!1;continue}if(2===a){if(l=t,e.errorRecoveryDisabledLanes&l)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;a=gs;var s=u.current.memoizedState.isDehydrated;if(s&&($s(u,i).flags|=256),2!==(i=Vs(u,i,!1))){if(us&&!s){u.errorRecoveryDisabledLanes|=l,ds|=l,a=4;break e}l=vs,vs=a,null!==l&&Os(l)}a=i}if(l=!1,2!==a)continue}}if(1===a){$s(e,0),Is(e,t,0,!0);break}e:{switch(r=e,a){case 0:case 1:throw Error(o(345));case 4:if((4194176&t)===t){Is(r,t,hs,!os);break e}break;case 2:vs=null;break;case 3:case 5:break;default:throw Error(o(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(l=bs+300-ue())){if(Is(r,t,hs,!os),0!==_e(r,0))break e;r.timeoutHandle=ef(As.bind(null,r,n,vs,ks,ys,t,hs,ds,ms,os,2,-0,0),l)}else As(r,n,vs,ks,ys,t,hs,ds,ms,os,0,-0,0)}}break}mc(e)}function Os(e){null===vs?vs=e:vs.push.apply(vs,e)}function As(e,t,n,r,a,l,i,u,s,c,f,d,p){var h=t.subtreeFlags;if((8192&h||!(16785408&~h))&&(Tf={stylesheets:null,count:0,unsuspend:Lf},zu(t),null!==(t=function(){if(null===Tf)throw Error(o(475));var e=Tf;return e.stylesheets&&0===e.count&&Af(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Af(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Js.bind(null,e,n,r,a,i,u,s,1,d,p)),void Is(e,l,i,!c);Js(e,n,r,a,i,u,s)}function Fs(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!Gn(l(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Is(e,t,n,r){t&=~ps,t&=~ds,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var l=31-we(a),o=1<<l;r[l]=-1,a&=~o}0!==n&&Re(e,n,t)}function Ds(){return!!(6&es)||(gc(0,!1),!1)}function Ms(){if(null!==ns){if(0===as)var e=ns.return;else vi=gi=null,vl(e=ns),ha=null,ma=0,e=ns;for(;null!==e;)Xu(e.alternate,e),e=e.return;ns=null}}function $s(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,tf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Ms(),ts=e,ns=n=Iu(e.current,null),rs=t,as=0,ls=null,os=!1,is=Pe(e,t),us=!1,ms=hs=ps=ds=fs=cs=0,vs=gs=null,ys=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-we(r),l=1<<a;t|=e[a],r&=~l}return ss=t,_r(),n}function Us(e,t){Ja=null,N.H=Co,t===oa?(t=pa(),as=3):t===ia?(t=pa(),as=4):as=t===Ho?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,ls=t,null===ns&&(cs=1,Do(e,Or(t,e.current)))}function Bs(){var e=N.H;return N.H=Co,null===e?Co:e}function Hs(){var e=N.A;return N.A=Zu,e}function qs(){cs=4,os||(4194176&rs)!==rs&&null!==za.current||(is=!0),!(134217727&fs)&&!(134217727&ds)||null===ts||Is(ts,rs,hs,!1)}function Vs(e,t,n){var r=es;es|=2;var a=Bs(),l=Hs();ts===e&&rs===t||(ks=null,$s(e,t)),t=!1;var o=cs;e:for(;;)try{if(0!==as&&null!==ns){var i=ns,u=ls;switch(as){case 8:Ms(),o=6;break e;case 3:case 2:case 6:null===za.current&&(t=!0);var s=as;if(as=0,ls=null,Ks(e,i,u,s),n&&is){o=0;break e}break;default:s=as,as=0,ls=null,Ks(e,i,u,s)}}Ws(),o=cs;break}catch(t){Us(e,t)}return t&&e.shellSuspendCounter++,vi=gi=null,es=r,N.H=a,N.A=l,null===ns&&(ts=null,rs=0,_r()),o}function Ws(){for(;null!==ns;)Gs(ns)}function Qs(){for(;null!==ns&&!oe();)Gs(ns)}function Gs(e){var t=hi(e.alternate,e,ss);e.memoizedProps=e.pendingProps,null===t?Xs(e):ns=t}function Ys(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Jo(n,t,t.pendingProps,t.type,void 0,rs);break;case 11:t=Jo(n,t,t.pendingProps,t.type.render,t.ref,rs);break;case 5:vl(t);default:Xu(n,t),t=hi(n,t=ns=Du(t,ss),ss)}e.memoizedProps=e.pendingProps,null===t?Xs(e):ns=t}function Ks(e,t,n,r){vi=gi=null,vl(t),ha=null,ma=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Si(t,n,a,!0),null!==(n=za.current)){switch(n.tag){case 13:return null===ja?qs():null===n.alternate&&0===cs&&(cs=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===ua?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),ac(e,r,a)),!1;case 22:return n.flags|=65536,r===ua?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),ac(e,r,a)),!1}throw Error(o(435,n.tag))}return ac(e,r,a),qs(),!1}if(Kr)return null!==(t=za.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==Jr&&la(Or(e=Error(o(422),{cause:r}),n))):(r!==Jr&&la(Or(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Or(r,n),Oi(e,a=$o(e.stateNode,r,a)),4!==cs&&(cs=2)),!1;var l=Error(o(520),{cause:r});if(l=Or(l,n),null===gs?gs=[l]:gs.push(l),4!==cs&&(cs=2),null===t)return!0;r=Or(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,Oi(n,e=$o(n.stateNode,r,e)),!1;case 1:if(t=n.type,l=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===l||"function"!=typeof l.componentDidCatch||null!==Ss&&Ss.has(l))))return n.flags|=65536,a&=-a,n.lanes|=a,Bo(a=Uo(a),e,n,r),Oi(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,rs))return cs=1,Do(e,Or(n,e.current)),void(ns=null)}catch(t){if(null!==a)throw ns=a,t;return cs=1,Do(e,Or(n,e.current)),void(ns=null)}32768&t.flags?(Kr||1===r?e=!0:is||536870912&rs?e=!1:(os=e=!0,(2===r||3===r||6===r)&&null!==(r=za.current)&&13===r.tag&&(r.flags|=16384)),Zs(t,e)):Xs(t)}function Xs(e){var t=e;do{if(32768&t.flags)return void Zs(t,os);e=t.return;var n=Yu(t.alternate,t,ss);if(null!==n)return void(ns=n);if(null!==(t=t.sibling))return void(ns=t);ns=t=e}while(null!==t);0===cs&&(cs=5)}function Zs(e,t){do{var n=Ku(e.alternate,e);if(null!==n)return n.flags&=32767,void(ns=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(ns=e);ns=e=n}while(null!==e);cs=6,ns=null}function Js(e,t,n,r,a,l,i,u,s,c){var f=N.T,d=B.p;try{B.p=2,N.T=null,function(e,t,n,r,a,l,i,u){do{tc()}while(null!==Es);if(6&es)throw Error(o(327));var s=e.finishedWork;if(r=e.finishedLanes,null===s)return null;if(e.finishedWork=null,e.finishedLanes=0,s===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var c=s.lanes|s.childLanes;if(function(e,t,n,r,a,l){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=o&~n;0<n;){var c=31-we(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Re(e,r,0),0!==l&&0===a&&0!==e.tag&&(e.suspendedLanes|=l&~(o&~t))}(e,r,c|=Cr,l,i,u),e===ts&&(ns=ts=null,rs=0),!(10256&s.subtreeFlags)&&!(10256&s.flags)||xs||(xs=!0,_s=c,Ps=n,ae(de,(function(){return tc(),null}))),n=!!(15990&s.flags),15990&s.subtreeFlags||n?(n=N.T,N.T=null,l=B.p,B.p=2,i=es,es|=4,function(e,t){if(e=e.containerInfo,Qc=Vf,er(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===a&&(u=i),p===l&&++f===r&&(s=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Gc={focusedElem:e,selectionRange:n},Vf=!1,nu=t;null!==nu;)if(e=(t=nu).child,1028&t.subtreeFlags&&null!==e)e.return=t,nu=e;else for(;null!==nu;){switch(l=(t=nu).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==l){e=void 0,n=t,a=l.memoizedProps,l=l.memoizedState,r=n.stateNode;try{var m=Ro(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,l),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){rc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))of(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":of(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,nu=e;break}nu=t.return}m=ru,ru=!1}(e,s),hu(s,e),tr(Gc,e.containerInfo),Vf=!!Qc,Gc=Qc=null,e.current=s,au(e,s.alternate,s),ie(),es=i,B.p=l,N.T=n):e.current=s,xs?(xs=!1,Es=e,Cs=r):ec(e,c),0===(c=e.pendingLanes)&&(Ss=null),function(e){if(ye&&"function"==typeof ye.onCommitFiberRoot)try{ye.onCommitFiberRoot(ve,e,void 0,!(128&~e.current.flags))}catch(e){}}(s.stateNode),mc(e),null!==t)for(a=e.onRecoverableError,s=0;s<t.length;s++)a((c=t[s]).value,{componentStack:c.stack});!!(3&Cs)&&tc(),c=e.pendingLanes,4194218&r&&42&c?e===js?zs++:(zs=0,js=e):zs=0,gc(0,!1)}(e,t,n,r,d,a,l,i)}finally{N.T=f,B.p=d}}function ec(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Ua(t))}function tc(){if(null!==Es){var e=Es,t=_s;_s=0;var n=Ae(Cs),r=N.T,a=B.p;try{if(B.p=32>n?32:n,N.T=null,null===Es)var l=!1;else{n=Ps,Ps=null;var i=Es,u=Cs;if(Es=null,Cs=0,6&es)throw Error(o(331));var s=es;if(es|=4,Tu(i.current),xu(i,i.current,u,n),es=s,gc(0,!1),ye&&"function"==typeof ye.onPostCommitFiberRoot)try{ye.onPostCommitFiberRoot(ve,i)}catch(e){}l=!0}return l}finally{B.p=a,N.T=r,ec(e,t)}}return!1}function nc(e,t,n){t=Or(n,t),null!==(e=Li(e,t=$o(e.stateNode,t,2),2))&&(Le(e,2),mc(e))}function rc(e,t,n){if(3===e.tag)nc(e,e,n);else for(;null!==t;){if(3===t.tag){nc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ss||!Ss.has(r))){e=Or(n,e),null!==(r=Li(t,n=Uo(2),2))&&(Bo(n,r,t,e),Le(r,2),mc(r));break}}t=t.return}}function ac(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Ju;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(us=!0,a.add(n),e=lc.bind(null,e,t,n),t.then(e,e))}function lc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ts===e&&(rs&n)===n&&(4===cs||3===cs&&(62914560&rs)===rs&&300>ue()-bs?!(2&es)&&$s(e,0):ps|=n,ms===rs&&(ms=0)),mc(e)}function oc(e,t){0===t&&(t=Ne()),null!==(e=jr(e,t))&&(Le(e,t),mc(e))}function ic(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),oc(e,n)}function uc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),oc(e,n)}var sc=null,cc=null,fc=!1,dc=!1,pc=!1,hc=0;function mc(e){var t;e!==cc&&null===e.next&&(null===cc?sc=cc=e:cc=cc.next=e),dc=!0,fc||(fc=!0,t=vc,rf((function(){6&es?ae(ce,t):t()})))}function gc(e,t){if(!pc&&dc){pc=!0;do{for(var n=!1,r=sc;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var l=0;else{var o=r.suspendedLanes,i=r.pingedLanes;l=(1<<31-we(42|e)+1)-1,l=201326677&(l&=a&~(o&~i))?201326677&l|1:l?2|l:0}0!==l&&(n=!0,wc(r,l))}else l=rs,!(3&(l=_e(r,r===ts?l:0)))||Pe(r,l)||(n=!0,wc(r,l));r=r.next}}while(n);pc=!1}}function vc(){dc=fc=!1;var e,t=0;0!==hc&&(((e=window.event)&&"popstate"===e.type?e!==Jc&&(Jc=e,!0):(Jc=null,!1))&&(t=hc),hc=0);for(var n=ue(),r=null,a=sc;null!==a;){var l=a.next,o=yc(a,n);0===o?(a.next=null,null===r?sc=l:r.next=l,null===l&&(cc=r)):(r=a,(0!==t||3&o)&&(dc=!0)),a=l}gc(t,!1)}function yc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=-62914561&e.pendingLanes;0<l;){var o=31-we(l),i=1<<o,u=a[o];-1===u?i&n&&!(i&r)||(a[o]=ze(i,t)):u<=t&&(e.expiredLanes|=i),l&=~i}if(n=rs,n=_e(e,e===(t=ts)?n:0),r=e.callbackNode,0===n||e===t&&2===as||null!==e.cancelPendingCommit)return null!==r&&null!==r&&le(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Pe(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&le(r),Ae(n)){case 2:case 8:n=fe;break;case 32:default:n=de;break;case 268435456:n=he}return r=bc.bind(null,e),n=ae(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&le(r),e.callbackPriority=2,e.callbackNode=null,2}function bc(e,t){var n=e.callbackNode;if(tc()&&e.callbackNode!==n)return null;var r=rs;return 0===(r=_e(e,e===ts?r:0))?null:(Rs(e,r,t),yc(e,ue()),null!=e.callbackNode&&e.callbackNode===n?bc.bind(null,e):null)}function wc(e,t){if(tc())return null;Rs(e,t,!0)}function kc(){return 0===hc&&(hc=je()),hc}function Sc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:jt(""+e)}function xc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ec=0;Ec<kr.length;Ec++){var Cc=kr[Ec];Sr(Cc.toLowerCase(),"on"+(Cc[0].toUpperCase()+Cc.slice(1)))}Sr(pr,"onAnimationEnd"),Sr(hr,"onAnimationIteration"),Sr(mr,"onAnimationStart"),Sr("dblclick","onDoubleClick"),Sr("focusin","onFocus"),Sr("focusout","onBlur"),Sr(gr,"onTransitionRun"),Sr(vr,"onTransitionStart"),Sr(yr,"onTransitionCancel"),Sr(br,"onTransitionEnd"),tt("onMouseEnter",["mouseout","mouseover"]),tt("onMouseLeave",["mouseout","mouseover"]),tt("onPointerEnter",["pointerout","pointerover"]),tt("onPointerLeave",["pointerout","pointerover"]),et("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),et("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),et("onBeforeInput",["compositionend","keypress","textInput","paste"]),et("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),et("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),et("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _c="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Pc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(_c));function zc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==l&&a.isPropagationStopped())break e;l=i,a.currentTarget=s;try{l(a)}catch(e){Oo(e)}a.currentTarget=null,l=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==l&&a.isPropagationStopped())break e;l=i,a.currentTarget=s;try{l(a)}catch(e){Oo(e)}a.currentTarget=null,l=u}}}}function jc(e,t){var n=t[Ue];void 0===n&&(n=t[Ue]=new Set);var r=e+"__bubble";n.has(r)||(Rc(t,e,2,!1),n.add(r))}function Nc(e,t,n){var r=0;t&&(r|=4),Rc(n,e,r,t)}var Tc="_reactListening"+Math.random().toString(36).slice(2);function Lc(e){if(!e[Tc]){e[Tc]=!0,Ze.forEach((function(t){"selectionchange"!==t&&(Pc.has(t)||Nc(t,!1,e),Nc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Tc]||(t[Tc]=!0,Nc("selectionchange",!1,t))}}function Rc(e,t,n,r){switch(Zf(t)){case 2:var a=Wf;break;case 8:a=Qf;break;default:a=Gf}n=a.bind(null,t,n,e),a=void 0,!Dt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Oc(e,t,n,r,a){var l=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;o=o.return}for(;null!==i;){if(null===(o=Qe(i)))return;if(5===(u=o.tag)||6===u||26===u||27===u){r=l=o;continue e}i=i.parentNode}}r=r.return}Ft((function(){var r=l,a=Tt(n),o=[];e:{var i=wr.get(e);if(void 0!==i){var u=Zt,s=e;switch(e){case"keypress":if(0===qt(n))break e;case"keydown":case"keyup":u=hn;break;case"focusin":s="focus",u=an;break;case"focusout":s="blur",u=an;break;case"beforeblur":case"afterblur":u=an;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=gn;break;case pr:case hr:case mr:u=ln;break;case br:u=vn;break;case"scroll":case"scrollend":u=en;break;case"wheel":u=yn;break;case"copy":case"cut":case"paste":u=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=mn;break;case"toggle":case"beforetoggle":u=bn}var c=!!(4&t),f=!c&&("scroll"===e||"scrollend"===e),d=c?null!==i?i+"Capture":null:i;c=[];for(var p,h=r;null!==h;){var m=h;if(p=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===p||null===d||null!=(m=It(h,d))&&c.push(Ac(h,m,p)),f)break;h=h.return}0<c.length&&(i=new u(i,s,null,n,a),o.push({event:i,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Nt||!(s=n.relatedTarget||n.fromElement)||!Qe(s)&&!s[$e])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Qe(s):null)&&(f=I(s),c=s.tag,s!==f||5!==c&&27!==c&&6!==c)&&(s=null)):(u=null,s=r),u!==s)){if(c=nn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=mn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:Ye(u),p=null==s?i:Ye(s),(i=new c(m,h+"leave",u,n,a)).target=f,i.relatedTarget=p,m=null,Qe(a)===r&&((c=new c(d,h+"enter",s,n,a)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Ic(p))h++;for(p=0,m=d;m;m=Ic(m))p++;for(;0<h-p;)c=Ic(c),h--;for(;0<p-h;)d=Ic(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Ic(c),d=Ic(d)}c=null}else c=null;null!==u&&Dc(o,i,u,c,!1),null!==s&&null!==f&&Dc(o,f,s,c,!0)}if("select"===(u=(i=r?Ye(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var g=In;else if(Tn(i))if(Dn)g=Qn;else{g=Vn;var v=qn}else!(u=i.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&_t(r.elementType)&&(g=In):g=Wn;switch(g&&(g=g(e,r))?Ln(o,g,n,a):(v&&v(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&yt(i,"number",i.value)),v=r?Ye(r):window,e){case"focusin":(Tn(v)||"true"===v.contentEditable)&&(rr=v,ar=r,lr=null);break;case"focusout":lr=ar=rr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,ir(o,n,a);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":ir(o,n,a)}var y;if(kn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else jn?Pn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(En&&"ko"!==n.locale&&(jn||"onCompositionStart"!==b?"onCompositionEnd"===b&&jn&&(y=Ht()):(Ut="value"in($t=a)?$t.value:$t.textContent,jn=!0)),0<(v=Fc(r,b)).length&&(b=new un(b,e,null,n,a),o.push({event:b,listeners:v}),(y||null!==(y=zn(n)))&&(b.data=y))),(y=xn?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(_n=!0,Cn);case"textInput":return(e=t.data)===Cn&&_n?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!kn&&Pn(e,t)?(e=Ht(),Bt=Ut=$t=null,jn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return En&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Fc(r,"onBeforeInput")).length&&(v=new un("onBeforeInput","beforeinput",null,n,a),o.push({event:v,listeners:b}),v.data=y),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var l=Sc((a[Me]||null).action),o=r.submitter;o&&null!==(t=(t=o[Me]||null)?Sc(t.formAction):o.getAttribute("formAction"))&&(l=t,o=null);var i=new Zt("action","action",null,r,a);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==hc){var e=o?xc(a,o):new FormData(a);co(n,{pending:!0,data:e,method:a.method,action:l},null,e)}}else"function"==typeof l&&(i.preventDefault(),e=o?xc(a,o):new FormData(a),co(n,{pending:!0,data:e,method:a.method,action:l},l,e))},currentTarget:a}]})}}(o,e,r,n,a)}zc(o,t)}))}function Ac(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Fc(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5!==(a=a.tag)&&26!==a&&27!==a||null===l||(null!=(a=It(e,n))&&r.unshift(Ac(e,a,l)),null!=(a=It(e,t))&&r.push(Ac(e,a,l))),e=e.return}return r}function Ic(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Dc(e,t,n,r,a){for(var l=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,a?null!=(s=It(n,l))&&o.unshift(Ac(n,s,u)):a||null!=(s=It(n,l))&&o.push(Ac(n,s,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Mc=/\r\n?/g,$c=/\u0000|\uFFFD/g;function Uc(e){return("string"==typeof e?e:""+e).replace(Mc,"\n").replace($c,"")}function Bc(e,t){return t=Uc(t),Uc(e)===t}function Hc(){}function qc(e,t,n,r,a,l){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||St(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&St(e,""+r);break;case"className":it(e,"class",r);break;case"tabIndex":it(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":it(e,n,r);break;case"style":Ct(e,r,l);break;case"data":if("object"!==t){it(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=jt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof l&&("formAction"===n?("input"!==t&&qc(e,t,"name",a.name,a,null),qc(e,t,"formEncType",a.formEncType,a,null),qc(e,t,"formMethod",a.formMethod,a,null),qc(e,t,"formTarget",a.formTarget,a,null)):(qc(e,t,"encType",a.encType,a,null),qc(e,t,"method",a.method,a,null),qc(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=jt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Hc);break;case"onScroll":null!=r&&jc("scroll",e);break;case"onScrollEnd":null!=r&&jc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=jt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":jc("beforetoggle",e),jc("toggle",e),ot(e,"popover",r);break;case"xlinkActuate":ut(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":ut(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":ut(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":ut(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":ut(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":ut(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":ut(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":ut(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":ut(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":ot(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&ot(e,n=Pt.get(n)||n,r)}}function Vc(e,t,n,r,a,l){switch(n){case"style":Ct(e,r,l);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?St(e,r):("number"==typeof r||"bigint"==typeof r)&&St(e,""+r);break;case"onScroll":null!=r&&jc("scroll",e);break;case"onScrollEnd":null!=r&&jc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Hc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Je.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(l=null!=(l=e[Me]||null)?l[n]:null)&&e.removeEventListener(t,l,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):ot(e,n,r):("function"!=typeof l&&null!==l&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function Wc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":jc("error",e),jc("load",e);var r,a=!1,l=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":a=!0;break;case"srcSet":l=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:qc(e,t,r,i,n,null)}}return l&&qc(e,t,"srcSet",n.srcSet,n,null),void(a&&qc(e,t,"src",n.src,n,null));case"input":jc("invalid",e);var u=r=i=l=null,s=null,c=null;for(a in n)if(n.hasOwnProperty(a)){var f=n[a];if(null!=f)switch(a){case"name":l=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:qc(e,t,a,f,n,null)}}return vt(e,r,u,s,c,i,l,!1),void ft(e);case"select":for(l in jc("invalid",e),a=i=r=null,n)if(n.hasOwnProperty(l)&&null!=(u=n[l]))switch(l){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":a=u;default:qc(e,t,l,u,n,null)}return t=r,n=i,e.multiple=!!a,void(null!=t?bt(e,!!a,t,!1):null!=n&&bt(e,!!a,n,!0));case"textarea":for(i in jc("invalid",e),r=l=a=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":a=u;break;case"defaultValue":l=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:qc(e,t,i,u,n,null)}return kt(e,a,l,r),void ft(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(a=n[s])&&("selected"===s?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:qc(e,t,s,a,n,null));return;case"dialog":jc("cancel",e),jc("close",e);break;case"iframe":case"object":jc("load",e);break;case"video":case"audio":for(a=0;a<_c.length;a++)jc(_c[a],e);break;case"image":jc("error",e),jc("load",e);break;case"details":jc("toggle",e);break;case"embed":case"source":case"link":jc("error",e),jc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(a=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:qc(e,t,c,a,n,null)}return;default:if(_t(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(a=n[f])&&Vc(e,t,f,a,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&qc(e,t,u,a,n,null)}var Qc=null,Gc=null;function Yc(e){return 9===e.nodeType?e:e.ownerDocument}function Kc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Xc(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Zc(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Jc=null,ef="function"==typeof setTimeout?setTimeout:void 0,tf="function"==typeof clearTimeout?clearTimeout:void 0,nf="function"==typeof Promise?Promise:void 0,rf="function"==typeof queueMicrotask?queueMicrotask:void 0!==nf?function(e){return nf.resolve(null).then(e).catch(af)}:ef;function af(e){setTimeout((function(){throw e}))}function lf(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void gd(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);gd(t)}function of(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":of(n),We(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function uf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function sf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function cf(e,t,n){switch(t=Yc(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}var ff=new Map,df=new Set;function pf(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var hf=B.d;B.d={f:function(){var e=hf.f(),t=Ds();return e||t},r:function(e){var t=Ge(e);null!==t&&5===t.tag&&"form"===t.type?po(t):hf.r(e)},D:function(e){hf.D(e),gf("dns-prefetch",e,null)},C:function(e,t){hf.C(e,t),gf("preconnect",e,t)},L:function(e,t,n){hf.L(e,t,n);var r=mf;if(r&&e&&t){var a='link[rel="preload"][as="'+mt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+mt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+mt(n.imageSizes)+'"]')):a+='[href="'+mt(e)+'"]';var l=a;switch(t){case"style":l=yf(e);break;case"script":l=kf(e)}ff.has(l)||(e=T({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),ff.set(l,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(bf(l))||"script"===t&&r.querySelector(Sf(l))||(Wc(t=r.createElement("link"),"link",e),Xe(t),r.head.appendChild(t)))}},m:function(e,t){hf.m(e,t);var n=mf;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+mt(r)+'"][href="'+mt(e)+'"]',l=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":l=kf(e)}if(!ff.has(l)&&(e=T({rel:"modulepreload",href:e},t),ff.set(l,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Sf(l)))return}Wc(r=n.createElement("link"),"link",e),Xe(r),n.head.appendChild(r)}}},X:function(e,t){hf.X(e,t);var n=mf;if(n&&e){var r=Ke(n).hoistableScripts,a=kf(e),l=r.get(a);l||((l=n.querySelector(Sf(a)))||(e=T({src:e,async:!0},t),(t=ff.get(a))&&_f(e,t),Xe(l=n.createElement("script")),Wc(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(a,l))}},S:function(e,t,n){hf.S(e,t,n);var r=mf;if(r&&e){var a=Ke(r).hoistableStyles,l=yf(e);t=t||"default";var o=a.get(l);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(bf(l)))i.loading=5;else{e=T({rel:"stylesheet",href:e,"data-precedence":t},n),(n=ff.get(l))&&Cf(e,n);var u=o=r.createElement("link");Xe(u),Wc(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Ef(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:i},a.set(l,o)}}},M:function(e,t){hf.M(e,t);var n=mf;if(n&&e){var r=Ke(n).hoistableScripts,a=kf(e),l=r.get(a);l||((l=n.querySelector(Sf(a)))||(e=T({src:e,async:!0,type:"module"},t),(t=ff.get(a))&&_f(e,t),Xe(l=n.createElement("script")),Wc(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(a,l))}}};var mf="undefined"==typeof document?null:document;function gf(e,t,n){var r=mf;if(r&&"string"==typeof t&&t){var a=mt(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),df.has(a)||(df.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(Wc(t=r.createElement("link"),"link",e),Xe(t),r.head.appendChild(t)))}}function vf(e,t,n,r){var a,l,i,u,s=(s=X.current)?pf(s):null;if(!s)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=yf(n.href),(r=(n=Ke(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=yf(n.href);var c=Ke(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(bf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),ff.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},ff.set(e,n),c||(a=s,l=e,i=n,u=f.state,a.querySelector('link[rel="preload"][as="style"]['+l+"]")?u.loading=1:(l=a.createElement("link"),u.preload=l,l.addEventListener("load",(function(){return u.loading|=1})),l.addEventListener("error",(function(){return u.loading|=2})),Wc(l,"link",i),Xe(l),a.head.appendChild(l))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=kf(n),(r=(n=Ke(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function yf(e){return'href="'+mt(e)+'"'}function bf(e){return'link[rel="stylesheet"]['+e+"]"}function wf(e){return T({},e,{"data-precedence":e.precedence,precedence:null})}function kf(e){return'[src="'+mt(e)+'"]'}function Sf(e){return"script[async]"+e}function xf(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+mt(n.href)+'"]');if(r)return t.instance=r,Xe(r),r;var a=T({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Xe(r=(e.ownerDocument||e).createElement("style")),Wc(r,"style",a),Ef(r,n.precedence,e),t.instance=r;case"stylesheet":a=yf(n.href);var l=e.querySelector(bf(a));if(l)return t.state.loading|=4,t.instance=l,Xe(l),l;r=wf(n),(a=ff.get(a))&&Cf(r,a),Xe(l=(e.ownerDocument||e).createElement("link"));var i=l;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Wc(l,"link",r),t.state.loading|=4,Ef(l,n.precedence,e),t.instance=l;case"script":return l=kf(n.src),(a=e.querySelector(Sf(l)))?(t.instance=a,Xe(a),a):(r=n,(a=ff.get(l))&&_f(r=T({},n),a),Xe(a=(e=e.ownerDocument||e).createElement("script")),Wc(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Ef(r,n.precedence,e));return t.instance}function Ef(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,l=a,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)l=i;else if(l!==a)break}l?l.parentNode.insertBefore(e,l.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Cf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function _f(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Pf=null;function zf(e,t,n){if(null===Pf){var r=new Map,a=Pf=new Map;a.set(n,r)}else(r=(a=Pf).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var l=n[a];if(!(l[Ve]||l[De]||"link"===e&&"stylesheet"===l.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==l.namespaceURI){var o=l.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(l):r.set(o,[l])}}return r}function jf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Nf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Tf=null;function Lf(){}function Rf(){if(this.count--,0===this.count)if(this.stylesheets)Af(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Of=null;function Af(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Of=new Map,t.forEach(Ff,e),Of=null,Rf.call(e))}function Ff(e,t){if(!(4&t.state.loading)){var n=Of.get(e);if(n)var r=n.get(null);else{n=new Map,Of.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),l=0;l<a.length;l++){var o=a[l];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(a=t.instance).getAttribute("data-precedence"),(l=n.get(o)||r)===r&&n.set(null,a),n.set(o,a),this.count++,r=Rf.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),l?l.parentNode.insertBefore(a,l.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var If={$$typeof:g,Provider:null,Consumer:null,_currentValue:H,_currentValue2:H,_threadCount:0};function Df(e,t,n,r,a,l,o,i){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Te(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Te(0),this.hiddenUpdates=Te(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=l,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Mf(e,t,n,r,a,l,o,i,u,s,c,f){return e=new Df(e,t,n,o,i,u,s,f),t=1,!0===l&&(t|=24),l=Au(3,null,null,t),e.current=l,l.stateNode=e,(t=$a()).refCount++,e.pooledCache=t,t.refCount++,l.memoizedState={element:r,isDehydrated:n,cache:t},ji(l),e}function $f(e){return e?e=Lr:Lr}function Uf(e,t,n,r,a,l){a=$f(a),null===r.context?r.context=a:r.pendingContext=a,(r=Ti(t)).payload={element:n},null!==(l=void 0===l?null:l)&&(r.callback=l),null!==(n=Li(e,r,t))&&(Ls(n,0,t),Ri(n,e,t))}function Bf(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Hf(e,t){Bf(e,t),(e=e.alternate)&&Bf(e,t)}function qf(e){if(13===e.tag){var t=jr(e,67108864);null!==t&&Ls(t,0,67108864),Hf(e,67108864)}}var Vf=!0;function Wf(e,t,n,r){var a=N.T;N.T=null;var l=B.p;try{B.p=2,Gf(e,t,n,r)}finally{B.p=l,N.T=a}}function Qf(e,t,n,r){var a=N.T;N.T=null;var l=B.p;try{B.p=8,Gf(e,t,n,r)}finally{B.p=l,N.T=a}}function Gf(e,t,n,r){if(Vf){var a=Yf(r);if(null===a)Oc(e,t,r,Kf,n),id(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return ed=ud(ed,e,t,n,r,a),!0;case"dragenter":return td=ud(td,e,t,n,r,a),!0;case"mouseover":return nd=ud(nd,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return rd.set(l,ud(rd.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,ad.set(l,ud(ad.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(id(e,r),4&t&&-1<od.indexOf(e)){for(;null!==a;){var l=Ge(a);if(null!==l)switch(l.tag){case 3:if((l=l.stateNode).current.memoizedState.isDehydrated){var o=Ce(l.pendingLanes);if(0!==o){var i=l;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-we(o);i.entanglements[1]|=u,o&=~u}mc(l),!(6&es)&&(ws=ue()+500,gc(0,!1))}}break;case 13:null!==(i=jr(l,2))&&Ls(i,0,2),Ds(),Hf(l,2)}if(null===(l=Yf(r))&&Oc(e,t,r,Kf,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else Oc(e,t,r,null,n)}}function Yf(e){return Xf(e=Tt(e))}var Kf=null;function Xf(e){if(Kf=null,null!==(e=Qe(e))){var t=I(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=D(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Kf=e,null}function Zf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(se()){case ce:return 2;case fe:return 8;case de:case pe:return 32;case he:return 268435456;default:return 32}default:return 32}}var Jf=!1,ed=null,td=null,nd=null,rd=new Map,ad=new Map,ld=[],od="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function id(e,t){switch(e){case"focusin":case"focusout":ed=null;break;case"dragenter":case"dragleave":td=null;break;case"mouseover":case"mouseout":nd=null;break;case"pointerover":case"pointerout":rd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ad.delete(t.pointerId)}}function ud(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&null!==(t=Ge(t))&&qf(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function sd(e){var t=Qe(e.target);if(null!==t){var n=I(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=D(n)))return e.blockedOn=t,void function(e){var t=B.p;try{return B.p=e,function(){if(13===n.tag){var e=Ns(),t=jr(n,e);null!==t&&Ls(t,0,e),Hf(n,e)}}()}finally{B.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function cd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yf(e.nativeEvent);if(null!==n)return null!==(t=Ge(n))&&qf(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Nt=r,n.target.dispatchEvent(r),Nt=null,t.shift()}return!0}function fd(e,t,n){cd(e)&&n.delete(t)}function dd(){Jf=!1,null!==ed&&cd(ed)&&(ed=null),null!==td&&cd(td)&&(td=null),null!==nd&&cd(nd)&&(nd=null),rd.forEach(fd),ad.forEach(fd)}function pd(e,t){e.blockedOn===t&&(e.blockedOn=null,Jf||(Jf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,dd)))}var hd=null;function md(e){hd!==e&&(hd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){hd===e&&(hd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===Xf(r||n))continue;break}var l=Ge(n);null!==l&&(e.splice(t,3),t-=3,co(l,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function gd(e){function t(t){return pd(t,e)}null!==ed&&pd(ed,e),null!==td&&pd(td,e),null!==nd&&pd(nd,e),rd.forEach(t),ad.forEach(t);for(var n=0;n<ld.length;n++){var r=ld[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<ld.length&&null===(n=ld[0]).blockedOn;)sd(n),null===n.blockedOn&&ld.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],l=n[r+1],o=a[Me]||null;if("function"==typeof l)o||md(n);else if(o){var i=null;if(l&&l.hasAttribute("formAction")){if(a=l,o=l[Me]||null)i=o.formAction;else if(null!==Xf(a))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),md(n)}}}function vd(e){this._internalRoot=e}function yd(e){this._internalRoot=e}yd.prototype.render=vd.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Uf(t.current,Ns(),e,t,null,null)},yd.prototype.unmount=vd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&tc(),Uf(e.current,2,null,e,null,null),Ds(),t[$e]=null}},yd.prototype.unstable_scheduleHydration=function(e){if(e){var t=Fe();e={blockedOn:null,target:e,priority:t};for(var n=0;n<ld.length&&0!==t&&t<ld[n].priority;n++);ld.splice(n,0,e),0===n&&sd(e)}};var bd=a.version;if("19.0.0"!==bd)throw Error(o(527,bd,"19.0.0"));B.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=I(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return M(a),e;if(l===r)return M(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?$(e):null)?null:e.stateNode};var wd={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:N,findFiberByHostInstance:Qe,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var kd=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!kd.isDisabled&&kd.supportsFiber)try{ve=kd.inject(wd),ye=kd}catch(e){}}t.createRoot=function(e,t){if(!i(e))throw Error(o(299));var n=!1,r="",a=Ao,l=Fo,u=Io;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(l=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Mf(e,1,!1,null,0,n,r,a,l,u,0,null),e[$e]=t.current,Lc(8===e.nodeType?e.parentNode:e),new vd(t)},t.hydrateRoot=function(e,t,n){if(!i(e))throw Error(o(299));var r=!1,a="",l=Ao,u=Fo,s=Io,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onUncaughtError&&(l=n.onUncaughtError),void 0!==n.onCaughtError&&(u=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Mf(e,1,!0,t,0,r,a,l,u,s,0,c)).context=$f(null),n=t.current,(a=Ti(r=Ns())).callback=null,Li(n,a,r),t.current.lanes=r,Le(t,r),mc(t),e[$e]=t.current,Lc(e),new yd(t)},t.version="19.0.0"},6221:(e,t,n)=>{"use strict";var r=n(6540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(){}var o={d:{f:l,r:function(){throw Error(a(522))},D:l,C:l,L:l,m:l,X:l,S:l,M:l},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,l="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:l}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:l,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.0.0"},5338:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(1247)},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(6221)},9698:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.fragment");function a(e,t,r){var a=null;if(void 0!==r&&(a=""+r),void 0!==t.key&&(a=""+t.key),"key"in t)for(var l in r={},t)"key"!==l&&(r[l]=t[l]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:a,ref:void 0!==t?t:null,props:r}}t.Fragment=r,t.jsx=a,t.jsxs=a},9869:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var k=Array.isArray,S={H:null,A:null,T:null,S:null},x=Object.prototype.hasOwnProperty;function E(e,t,r,a,l,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var _=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function z(){}function j(e,t,a,l,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return j((c=e._init)(e._payload),t,a,l,o)}}if(c)return o=o(e),c=""===l?"."+P(e,0):l,k(o)?(a="",null!=c&&(a=c.replace(_,"$&/")+"/"),j(o,t,a,"",(function(e){return e}))):null!=o&&(C(o)&&(u=o,s=a+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(_,"$&/")+"/")+c,o=E(u.type,s,void 0,0,0,u.props)),t.push(o)),1;c=0;var f,h=""===l?".":l+":";if(k(e))for(var m=0;m<e.length;m++)c+=j(l=e[m],t,a,i=h+P(l,m),o);else if("function"==typeof(m=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=m.call(e),m=0;!(l=e.next()).done;)c+=j(l=l.value,t,a,i=h+P(l,m++),o);else if("object"===i){if("function"==typeof e.then)return j(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(z,z):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,l,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function N(e,t,n){if(null==e)return e;var r=[],a=0;return j(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function R(){}t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=o,t.PureComponent=b,t.StrictMode=l,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),a=e.key;if(null!=t)for(l in t.ref,void 0!==t.key&&(a=""+t.key),t)!x.call(t,l)||"key"===l||"__self"===l||"__source"===l||"ref"===l&&void 0===t.ref||(r[l]=t[l]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var o=Array(l),i=0;i<l;i++)o[i]=arguments[i+2];r.children=o}return E(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,a={},l=null;if(null!=t)for(r in void 0!==t.key&&(l=""+t.key),t)x.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var o=arguments.length-2;if(1===o)a.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];a.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===a[r]&&(a[r]=o[r]);return E(e,l,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=S.T,n={};S.T=n;try{var r=e(),a=S.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(R,L)}catch(e){L(e)}finally{S.T=t}},t.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},t.use=function(e){return S.H.use(e)},t.useActionState=function(e,t,n){return S.H.useActionState(e,t,n)},t.useCallback=function(e,t){return S.H.useCallback(e,t)},t.useContext=function(e){return S.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return S.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return S.H.useEffect(e,t)},t.useId=function(){return S.H.useId()},t.useImperativeHandle=function(e,t,n){return S.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.H.useMemo(e,t)},t.useOptimistic=function(e,t){return S.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return S.H.useReducer(e,t,n)},t.useRef=function(e){return S.H.useRef(e)},t.useState=function(e){return S.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.H.useTransition()},t.version="19.0.0"},6540:(e,t,n)=>{"use strict";e.exports=n(9869)},4848:(e,t,n)=>{"use strict";e.exports=n(9698)},4477:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>l(u,n))s<a&&0>l(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<a&&0>l(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)a(c);else{if(!(t.startTime<=e))break;a(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(g=!1,w(e),!m)if(null!==r(s))m=!0,T();else{var t=r(c);null!==t&&L(k,t.startTime-e)}}var S,x=!1,E=-1,C=5,_=-1;function P(){return!(t.unstable_now()-_<C)}function z(){if(x){var e=t.unstable_now();_=e;var n=!0;try{e:{m=!1,g&&(g=!1,y(E),E=-1),h=!0;var l=p;try{t:{for(w(e),d=r(s);null!==d&&!(d.expirationTime>e&&P());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,w(e),n=!0;break t}d===r(s)&&a(s),w(e)}else a(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&L(k,u.startTime-e),n=!1}}break e}finally{d=null,p=l,h=!1}n=void 0}}finally{n?S():x=!1}}}if("function"==typeof b)S=function(){b(z)};else if("undefined"!=typeof MessageChannel){var j=new MessageChannel,N=j.port2;j.port1.onmessage=z,S=function(){N.postMessage(null)}}else S=function(){v(z,0)};function T(){x||(x=!0,S())}function L(e,n){E=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,T())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var o=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?o+l:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>o?(e.sortIndex=l,n(c,e),null===r(s)&&e===r(c)&&(g?(y(E),E=-1):g=!0,L(k,l-o))):(e.sortIndex=i,n(s,e),m||h||(m=!0,T())),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},9982:(e,t,n)=>{"use strict";e.exports=n(4477)},2833:e=>{e.exports=function(e,t,n,r){var a=n?n.call(r,e,t):void 0;if(void 0!==a)return!!a;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var l=Object.keys(e),o=Object.keys(t);if(l.length!==o.length)return!1;for(var i=Object.prototype.hasOwnProperty.bind(t),u=0;u<l.length;u++){var s=l[u];if(!i(s))return!1;var c=e[s],f=t[s];if(!1===(a=n?n.call(r,c,f,s):void 0)||void 0===a&&c!==f)return!1}return!0}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var l=t[r]={exports:{}};return e[r](l,l.exports,n),l.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&(!e||!/^http(s?):/.test(e));)e=r[a--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{"use strict";var e=n(4848),t=n(5338),r=function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};function a(e,t,n){if(n||2===arguments.length)for(var r,a=0,l=t.length;a<l;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var l=n(6540),o=n(2833),i=n.n(o),u="-ms-",s="-moz-",c="-webkit-",f="comm",d="rule",p="decl",h="@keyframes",m=Math.abs,g=String.fromCharCode,v=Object.assign;function y(e){return e.trim()}function b(e,t){return(e=t.exec(e))?e[0]:e}function w(e,t,n){return e.replace(t,n)}function k(e,t,n){return e.indexOf(t,n)}function S(e,t){return 0|e.charCodeAt(t)}function x(e,t,n){return e.slice(t,n)}function E(e){return e.length}function C(e){return e.length}function _(e,t){return t.push(e),e}function P(e,t){return e.filter((function(e){return!b(e,t)}))}var z=1,j=1,N=0,T=0,L=0,R="";function O(e,t,n,r,a,l,o,i){return{value:e,root:t,parent:n,type:r,props:a,children:l,line:z,column:j,length:o,return:"",siblings:i}}function A(e,t){return v(O("",null,null,"",null,null,0,e.siblings),e,{length:-e.length},t)}function F(e){for(;e.root;)e=A(e.root,{children:[e]});_(e,e.siblings)}function I(){return L=T>0?S(R,--T):0,j--,10===L&&(j=1,z--),L}function D(){return L=T<N?S(R,T++):0,j++,10===L&&(j=1,z++),L}function M(){return S(R,T)}function $(){return T}function U(e,t){return x(R,e,t)}function B(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function H(e){return y(U(T-1,W(91===e?e+2:40===e?e+1:e)))}function q(e){for(;(L=M())&&L<33;)D();return B(e)>2||B(L)>3?"":" "}function V(e,t){for(;--t&&D()&&!(L<48||L>102||L>57&&L<65||L>70&&L<97););return U(e,$()+(t<6&&32==M()&&32==D()))}function W(e){for(;D();)switch(L){case e:return T;case 34:case 39:34!==e&&39!==e&&W(L);break;case 40:41===e&&W(e);break;case 92:D()}return T}function Q(e,t){for(;D()&&e+L!==57&&(e+L!==84||47!==M()););return"/*"+U(t,T-1)+"*"+g(47===e?e:D())}function G(e){for(;!B(M());)D();return U(e,T)}function Y(e,t){for(var n="",r=0;r<e.length;r++)n+=t(e[r],r,e,t)||"";return n}function K(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case p:return e.return=e.return||e.value;case f:return"";case h:return e.return=e.value+"{"+Y(e.children,r)+"}";case d:if(!E(e.value=e.props.join(",")))return""}return E(n=Y(e.children,r))?e.return=e.value+"{"+n+"}":""}function X(e,t,n){switch(function(e,t){return 45^S(e,0)?(((t<<2^S(e,0))<<2^S(e,1))<<2^S(e,2))<<2^S(e,3):0}(e,t)){case 5103:return c+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return c+e+e;case 4789:return s+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return c+e+s+e+u+e+e;case 5936:switch(S(e,t+11)){case 114:return c+e+u+w(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return c+e+u+w(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return c+e+u+w(e,/[svh]\w+-[tblr]{2}/,"lr")+e}case 6828:case 4268:case 2903:return c+e+u+e+e;case 6165:return c+e+u+"flex-"+e+e;case 5187:return c+e+w(e,/(\w+).+(:[^]+)/,c+"box-$1$2"+u+"flex-$1$2")+e;case 5443:return c+e+u+"flex-item-"+w(e,/flex-|-self/g,"")+(b(e,/flex-|baseline/)?"":u+"grid-row-"+w(e,/flex-|-self/g,""))+e;case 4675:return c+e+u+"flex-line-pack"+w(e,/align-content|flex-|-self/g,"")+e;case 5548:return c+e+u+w(e,"shrink","negative")+e;case 5292:return c+e+u+w(e,"basis","preferred-size")+e;case 6060:return c+"box-"+w(e,"-grow","")+c+e+u+w(e,"grow","positive")+e;case 4554:return c+w(e,/([^-])(transform)/g,"$1"+c+"$2")+e;case 6187:return w(w(w(e,/(zoom-|grab)/,c+"$1"),/(image-set)/,c+"$1"),e,"")+e;case 5495:case 3959:return w(e,/(image-set\([^]*)/,c+"$1$`$1");case 4968:return w(w(e,/(.+:)(flex-)?(.*)/,c+"box-pack:$3"+u+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+c+e+e;case 4200:if(!b(e,/flex-|baseline/))return u+"grid-column-align"+x(e,t)+e;break;case 2592:case 3360:return u+w(e,"template-","")+e;case 4384:case 3616:return n&&n.some((function(e,n){return t=n,b(e.props,/grid-\w+-end/)}))?~k(e+(n=n[t].value),"span",0)?e:u+w(e,"-start","")+e+u+"grid-row-span:"+(~k(n,"span",0)?b(n,/\d+/):+b(n,/\d+/)-+b(e,/\d+/))+";":u+w(e,"-start","")+e;case 4896:case 4128:return n&&n.some((function(e){return b(e.props,/grid-\w+-start/)}))?e:u+w(w(e,"-end","-span"),"span ","")+e;case 4095:case 3583:case 4068:case 2532:return w(e,/(.+)-inline(.+)/,c+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(E(e)-1-t>6)switch(S(e,t+1)){case 109:if(45!==S(e,t+4))break;case 102:return w(e,/(.+:)(.+)-([^]+)/,"$1"+c+"$2-$3$1"+s+(108==S(e,t+3)?"$3":"$2-$3"))+e;case 115:return~k(e,"stretch",0)?X(w(e,"stretch","fill-available"),t,n)+e:e}break;case 5152:case 5920:return w(e,/(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/,(function(t,n,r,a,l,o,i){return u+n+":"+r+i+(a?u+n+"-span:"+(l?o:+o-+r)+i:"")+e}));case 4949:if(121===S(e,t+6))return w(e,":",":"+c)+e;break;case 6444:switch(S(e,45===S(e,14)?18:11)){case 120:return w(e,/(.+:)([^;\s!]+)(;|(\s+)?!.+)?/,"$1"+c+(45===S(e,14)?"inline-":"")+"box$3$1"+c+"$2$3$1"+u+"$2box$3")+e;case 100:return w(e,":",":"+u)+e}break;case 5719:case 2647:case 2135:case 3927:case 2391:return w(e,"scroll-","scroll-snap-")+e}return e}function Z(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case p:return void(e.return=X(e.value,e.length,n));case h:return Y([A(e,{value:w(e.value,"@","@"+c)})],r);case d:if(e.length)return function(e,t){return e.map(t).join("")}(n=e.props,(function(t){switch(b(t,r=/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":F(A(e,{props:[w(t,/:(read-\w+)/,":-moz-$1")]})),F(A(e,{props:[t]})),v(e,{props:P(n,r)});break;case"::placeholder":F(A(e,{props:[w(t,/:(plac\w+)/,":"+c+"input-$1")]})),F(A(e,{props:[w(t,/:(plac\w+)/,":-moz-$1")]})),F(A(e,{props:[w(t,/:(plac\w+)/,u+"input-$1")]})),F(A(e,{props:[t]})),v(e,{props:P(n,r)})}return""}))}}function J(e){return function(e){return R="",e}(ee("",null,null,null,[""],e=function(e){return z=j=1,N=E(R=e),T=0,[]}(e),0,[0],e))}function ee(e,t,n,r,a,l,o,i,u){for(var s=0,c=0,f=o,d=0,p=0,h=0,v=1,y=1,b=1,x=0,C="",P=a,z=l,j=r,N=C;y;)switch(h=x,x=D()){case 40:if(108!=h&&58==S(N,f-1)){-1!=k(N+=w(H(x),"&","&\f"),"&\f",m(s?i[s-1]:0))&&(b=-1);break}case 34:case 39:case 91:N+=H(x);break;case 9:case 10:case 13:case 32:N+=q(h);break;case 92:N+=V($()-1,7);continue;case 47:switch(M()){case 42:case 47:_(ne(Q(D(),$()),t,n,u),u);break;default:N+="/"}break;case 123*v:i[s++]=E(N)*b;case 125*v:case 59:case 0:switch(x){case 0:case 125:y=0;case 59+c:-1==b&&(N=w(N,/\f/g,"")),p>0&&E(N)-f&&_(p>32?re(N+";",r,n,f-1,u):re(w(N," ","")+";",r,n,f-2,u),u);break;case 59:N+=";";default:if(_(j=te(N,t,n,s,c,a,i,C,P=[],z=[],f,l),l),123===x)if(0===c)ee(N,t,j,j,P,l,f,i,z);else switch(99===d&&110===S(N,3)?100:d){case 100:case 108:case 109:case 115:ee(e,j,j,r&&_(te(e,j,j,0,0,a,i,C,a,P=[],f,z),z),a,z,f,i,r?P:z);break;default:ee(N,j,j,j,[""],z,0,i,z)}}s=c=p=0,v=b=1,C=N="",f=o;break;case 58:f=1+E(N),p=h;default:if(v<1)if(123==x)--v;else if(125==x&&0==v++&&125==I())continue;switch(N+=g(x),x*v){case 38:b=c>0?1:(N+="\f",-1);break;case 44:i[s++]=(E(N)-1)*b,b=1;break;case 64:45===M()&&(N+=H(D())),d=M(),c=f=E(C=N+=G($())),x++;break;case 45:45===h&&2==E(N)&&(v=0)}}return l}function te(e,t,n,r,a,l,o,i,u,s,c,f){for(var p=a-1,h=0===a?l:[""],g=C(h),v=0,b=0,k=0;v<r;++v)for(var S=0,E=x(e,p+1,p=m(b=o[v])),_=e;S<g;++S)(_=y(b>0?h[S]+" "+E:w(E,/&\f/g,h[S])))&&(u[k++]=_);return O(e,t,n,0===a?d:i,u,s,c,f)}function ne(e,t,n,r){return O(e,t,n,f,g(L),x(e,2,-2),0,r)}function re(e,t,n,r,a){return O(e,t,n,p,x(e,0,r),x(e,r+1,-1),r,a)}var ae={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},le="undefined"!=typeof process&&void 0!==process.env&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",oe="active",ie="data-styled-version",ue="6.1.14",se="/*!sc*/\n",ce="undefined"!=typeof window&&"HTMLElement"in window,fe=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),de={},pe=(new Set,Object.freeze([])),he=Object.freeze({});function me(e,t,n){return void 0===n&&(n=he),e.theme!==n.theme&&e.theme||t||n.theme}var ge=new Set(["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track","u","ul","use","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"]),ve=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,ye=/(^-|-$)/g;function be(e){return e.replace(ve,"-").replace(ye,"")}var we=/(a)(d)/gi,ke=function(e){return String.fromCharCode(e+(e>25?39:97))};function Se(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=ke(t%52)+n;return(ke(t%52)+n).replace(we,"$1-$2")}var xe,Ee=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Ce=function(e){return Ee(5381,e)};function _e(e){return Se(Ce(e)>>>0)}function Pe(e){return"string"==typeof e&&!0}var ze="function"==typeof Symbol&&Symbol.for,je=ze?Symbol.for("react.memo"):60115,Ne=ze?Symbol.for("react.forward_ref"):60112,Te={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},Le={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Re={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Oe=((xe={})[Ne]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},xe[je]=Re,xe);function Ae(e){return("type"in(t=e)&&t.type.$$typeof)===je?Re:"$$typeof"in e?Oe[e.$$typeof]:Te;var t}var Fe=Object.defineProperty,Ie=Object.getOwnPropertyNames,De=Object.getOwnPropertySymbols,Me=Object.getOwnPropertyDescriptor,$e=Object.getPrototypeOf,Ue=Object.prototype;function Be(e,t,n){if("string"!=typeof t){if(Ue){var r=$e(t);r&&r!==Ue&&Be(e,r,n)}var a=Ie(t);De&&(a=a.concat(De(t)));for(var l=Ae(e),o=Ae(t),i=0;i<a.length;++i){var u=a[i];if(!(u in Le||n&&n[u]||o&&u in o||l&&u in l)){var s=Me(t,u);try{Fe(e,u,s)}catch(e){}}}}return e}function He(e){return"function"==typeof e}function qe(e){return"object"==typeof e&&"styledComponentId"in e}function Ve(e,t){return e&&t?"".concat(e," ").concat(t):e||t||""}function We(e,t){if(0===e.length)return"";for(var n=e[0],r=1;r<e.length;r++)n+=t?t+e[r]:e[r];return n}function Qe(e){return null!==e&&"object"==typeof e&&e.constructor.name===Object.name&&!("props"in e&&e.$$typeof)}function Ge(e,t,n){if(void 0===n&&(n=!1),!n&&!Qe(e)&&!Array.isArray(e))return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)e[r]=Ge(e[r],t[r]);else if(Qe(t))for(var r in t)e[r]=Ge(e[r],t[r]);return e}function Ye(e,t){Object.defineProperty(e,"toString",{value:t})}function Ke(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(e," for more information.").concat(t.length>0?" Args: ".concat(t.join(", ")):""))}var Xe=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}return e.prototype.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},e.prototype.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,a=r;e>=a;)if((a<<=1)<0)throw Ke(16,"".concat(e));this.groupSizes=new Uint32Array(a),this.groupSizes.set(n),this.length=a;for(var l=r;l<a;l++)this.groupSizes[l]=0}for(var o=this.indexOfGroup(e+1),i=(l=0,t.length);l<i;l++)this.tag.insertRule(o,t[l])&&(this.groupSizes[e]++,o++)},e.prototype.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var a=n;a<r;a++)this.tag.deleteRule(n)}},e.prototype.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),a=r+n,l=r;l<a;l++)t+="".concat(this.tag.getRule(l)).concat(se);return t},e}(),Ze=new Map,Je=new Map,et=1,tt=function(e){if(Ze.has(e))return Ze.get(e);for(;Je.has(et);)et++;var t=et++;return Ze.set(e,t),Je.set(t,e),t},nt=function(e,t){et=t+1,Ze.set(e,t),Je.set(t,e)},rt="style[".concat(le,"][").concat(ie,'="').concat(ue,'"]'),at=new RegExp("^".concat(le,'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)')),lt=function(e,t,n){for(var r,a=n.split(","),l=0,o=a.length;l<o;l++)(r=a[l])&&e.registerName(t,r)},ot=function(e,t){for(var n,r=(null!==(n=t.textContent)&&void 0!==n?n:"").split(se),a=[],l=0,o=r.length;l<o;l++){var i=r[l].trim();if(i){var u=i.match(at);if(u){var s=0|parseInt(u[1],10),c=u[2];0!==s&&(nt(c,s),lt(e,c,u[3]),e.getTag().insertRules(s,a)),a.length=0}else a.push(i)}}},it=function(e){for(var t=document.querySelectorAll(rt),n=0,r=t.length;n<r;n++){var a=t[n];a&&a.getAttribute(le)!==oe&&(ot(e,a),a.parentNode&&a.parentNode.removeChild(a))}};function ut(){return n.nc}var st=function(e){var t=document.head,n=e||t,r=document.createElement("style"),a=function(e){var t=Array.from(e.querySelectorAll("style[".concat(le,"]")));return t[t.length-1]}(n),l=void 0!==a?a.nextSibling:null;r.setAttribute(le,oe),r.setAttribute(ie,ue);var o=ut();return o&&r.setAttribute("nonce",o),n.insertBefore(r,l),r},ct=function(){function e(e){this.element=st(e),this.element.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var a=t[n];if(a.ownerNode===e)return a}throw Ke(17)}(this.element),this.length=0}return e.prototype.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},e.prototype.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},e.prototype.getRule=function(e){var t=this.sheet.cssRules[e];return t&&t.cssText?t.cssText:""},e}(),ft=function(){function e(e){this.element=st(e),this.nodes=this.element.childNodes,this.length=0}return e.prototype.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t);return this.element.insertBefore(n,this.nodes[e]||null),this.length++,!0}return!1},e.prototype.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},e.prototype.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),dt=function(){function e(e){this.rules=[],this.length=0}return e.prototype.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},e.prototype.deleteRule=function(e){this.rules.splice(e,1),this.length--},e.prototype.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),pt=ce,ht={isServer:!ce,useCSSOMInjection:!fe},mt=function(){function e(e,t,n){void 0===e&&(e=he),void 0===t&&(t={});var a=this;this.options=r(r({},ht),e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&ce&&pt&&(pt=!1,it(this)),Ye(this,(function(){return function(e){for(var t=e.getTag(),n=t.length,r="",a=function(n){var a=function(e){return Je.get(e)}(n);if(void 0===a)return"continue";var l=e.names.get(a),o=t.getGroup(n);if(void 0===l||!l.size||0===o.length)return"continue";var i="".concat(le,".g").concat(n,'[id="').concat(a,'"]'),u="";void 0!==l&&l.forEach((function(e){e.length>0&&(u+="".concat(e,","))})),r+="".concat(o).concat(i,'{content:"').concat(u,'"}').concat(se)},l=0;l<n;l++)a(l);return r}(a)}))}return e.registerId=function(e){return tt(e)},e.prototype.rehydrate=function(){!this.server&&ce&&it(this)},e.prototype.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(r(r({},this.options),t),this.gs,n&&this.names||void 0)},e.prototype.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},e.prototype.getTag=function(){return this.tag||(this.tag=(e=function(e){var t=e.useCSSOMInjection,n=e.target;return e.isServer?new dt(n):t?new ct(n):new ft(n)}(this.options),new Xe(e)));var e},e.prototype.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},e.prototype.registerName=function(e,t){if(tt(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},e.prototype.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(tt(e),n)},e.prototype.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},e.prototype.clearRules=function(e){this.getTag().clearGroup(tt(e)),this.clearNames(e)},e.prototype.clearTag=function(){this.tag=void 0},e}(),gt=/&/g,vt=/^\s*\/\/.*$/gm;function yt(e,t){return e.map((function(e){return"rule"===e.type&&(e.value="".concat(t," ").concat(e.value),e.value=e.value.replaceAll(",",",".concat(t," ")),e.props=e.props.map((function(e){return"".concat(t," ").concat(e)}))),Array.isArray(e.children)&&"@keyframes"!==e.type&&(e.children=yt(e.children,t)),e}))}function bt(e){var t,n,r,a=void 0===e?he:e,l=a.options,o=void 0===l?he:l,i=a.plugins,u=void 0===i?pe:i,s=function(e,r,a){return a.startsWith(n)&&a.endsWith(n)&&a.replaceAll(n,"").length>0?".".concat(t):e},c=u.slice();c.push((function(e){e.type===d&&e.value.includes("&")&&(e.props[0]=e.props[0].replace(gt,n).replace(r,s))})),o.prefix&&c.push(Z),c.push(K);var f=function(e,a,l,i){void 0===a&&(a=""),void 0===l&&(l=""),void 0===i&&(i="&"),t=i,n=a,r=new RegExp("\\".concat(n,"\\b"),"g");var u=e.replace(vt,""),s=J(l||a?"".concat(l," ").concat(a," { ").concat(u," }"):u);o.namespace&&(s=yt(s,o.namespace));var f,d,p,h=[];return Y(s,(f=c.concat((p=function(e){return h.push(e)},function(e){e.root||(e=e.return)&&p(e)})),d=C(f),function(e,t,n,r){for(var a="",l=0;l<d;l++)a+=f[l](e,t,n,r)||"";return a})),h};return f.hash=u.length?u.reduce((function(e,t){return t.name||Ke(15),Ee(e,t.name)}),5381).toString():"",f}var wt=new mt,kt=bt(),St=l.createContext({shouldForwardProp:void 0,styleSheet:wt,stylis:kt}),xt=(St.Consumer,l.createContext(void 0));function Et(){return(0,l.useContext)(St)}function Ct(e){var t=(0,l.useState)(e.stylisPlugins),n=t[0],r=t[1],a=Et().styleSheet,o=(0,l.useMemo)((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target,a]),u=(0,l.useMemo)((function(){return bt({options:{namespace:e.namespace,prefix:e.enableVendorPrefixes},plugins:n})}),[e.enableVendorPrefixes,e.namespace,n]);(0,l.useEffect)((function(){i()(n,e.stylisPlugins)||r(e.stylisPlugins)}),[e.stylisPlugins]);var s=(0,l.useMemo)((function(){return{shouldForwardProp:e.shouldForwardProp,styleSheet:o,stylis:u}}),[e.shouldForwardProp,o,u]);return l.createElement(St.Provider,{value:s},l.createElement(xt.Provider,{value:u},e.children))}var _t=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=kt);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.name=e,this.id="sc-keyframes-".concat(e),this.rules=t,Ye(this,(function(){throw Ke(12,String(n.name))}))}return e.prototype.getName=function(e){return void 0===e&&(e=kt),this.name+e.hash},e}(),Pt=function(e){return e>="A"&&e<="Z"};function zt(e){for(var t="",n=0;n<e.length;n++){var r=e[n];if(1===n&&"-"===r&&"-"===e[0])return e;Pt(r)?t+="-"+r.toLowerCase():t+=r}return t.startsWith("ms-")?"-"+t:t}var jt=function(e){return null==e||!1===e||""===e},Nt=function(e){var t,n,r=[];for(var l in e){var o=e[l];e.hasOwnProperty(l)&&!jt(o)&&(Array.isArray(o)&&o.isCss||He(o)?r.push("".concat(zt(l),":"),o,";"):Qe(o)?r.push.apply(r,a(a(["".concat(l," {")],Nt(o),!1),["}"],!1)):r.push("".concat(zt(l),": ").concat((t=l,null==(n=o)||"boolean"==typeof n||""===n?"":"number"!=typeof n||0===n||t in ae||t.startsWith("--")?String(n).trim():"".concat(n,"px")),";")))}return r};function Tt(e,t,n,r){return jt(e)?[]:qe(e)?[".".concat(e.styledComponentId)]:He(e)?!He(a=e)||a.prototype&&a.prototype.isReactComponent||!t?[e]:Tt(e(t),t,n,r):e instanceof _t?n?(e.inject(n,r),[e.getName(r)]):[e]:Qe(e)?Nt(e):Array.isArray(e)?Array.prototype.concat.apply(pe,e.map((function(e){return Tt(e,t,n,r)}))):[e.toString()];var a}function Lt(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(He(n)&&!qe(n))return!1}return!0}var Rt=Ce(ue),Ot=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&Lt(e),this.componentId=t,this.baseHash=Ee(Rt,t),this.baseStyle=n,mt.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.baseStyle?this.baseStyle.generateAndInjectStyles(e,t,n):"";if(this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(this.componentId,this.staticRulesId))r=Ve(r,this.staticRulesId);else{var a=We(Tt(this.rules,e,t,n)),l=Se(Ee(this.baseHash,a)>>>0);if(!t.hasNameForId(this.componentId,l)){var o=n(a,".".concat(l),void 0,this.componentId);t.insertRules(this.componentId,l,o)}r=Ve(r,l),this.staticRulesId=l}else{for(var i=Ee(this.baseHash,n.hash),u="",s=0;s<this.rules.length;s++){var c=this.rules[s];if("string"==typeof c)u+=c;else if(c){var f=We(Tt(c,e,t,n));i=Ee(i,f+s),u+=f}}if(u){var d=Se(i>>>0);t.hasNameForId(this.componentId,d)||t.insertRules(this.componentId,d,n(u,".".concat(d),void 0,this.componentId)),r=Ve(r,d)}}return r},e}(),At=l.createContext(void 0);At.Consumer;var Ft={};function It(e,t,n){var a=qe(e),o=e,i=!Pe(e),u=t.attrs,s=void 0===u?pe:u,c=t.componentId,f=void 0===c?function(e,t){var n="string"!=typeof e?"sc":be(e);Ft[n]=(Ft[n]||0)+1;var r="".concat(n,"-").concat(_e(ue+n+Ft[n]));return t?"".concat(t,"-").concat(r):r}(t.displayName,t.parentComponentId):c,d=t.displayName,p=void 0===d?function(e){return Pe(e)?"styled.".concat(e):"Styled(".concat(function(e){return e.displayName||e.name||"Component"}(e),")")}(e):d,h=t.displayName&&t.componentId?"".concat(be(t.displayName),"-").concat(t.componentId):t.componentId||f,m=a&&o.attrs?o.attrs.concat(s).filter(Boolean):s,g=t.shouldForwardProp;if(a&&o.shouldForwardProp){var v=o.shouldForwardProp;if(t.shouldForwardProp){var y=t.shouldForwardProp;g=function(e,t){return v(e,t)&&y(e,t)}}else g=v}var b=new Ot(n,h,a?o.componentStyle:void 0);function w(e,t){return function(e,t,n){var a=e.attrs,o=e.componentStyle,i=e.defaultProps,u=e.foldedComponentIds,s=e.styledComponentId,c=e.target,f=l.useContext(At),d=Et(),p=e.shouldForwardProp||d.shouldForwardProp,h=me(t,f,i)||he,m=function(e,t,n){for(var a,l=r(r({},t),{className:void 0,theme:n}),o=0;o<e.length;o+=1){var i=He(a=e[o])?a(l):a;for(var u in i)l[u]="className"===u?Ve(l[u],i[u]):"style"===u?r(r({},l[u]),i[u]):i[u]}return t.className&&(l.className=Ve(l.className,t.className)),l}(a,t,h),g=m.as||c,v={};for(var y in m)void 0===m[y]||"$"===y[0]||"as"===y||"theme"===y&&m.theme===h||("forwardedAs"===y?v.as=m.forwardedAs:p&&!p(y,g)||(v[y]=m[y]));var b=function(e,t){var n=Et();return e.generateAndInjectStyles(t,n.styleSheet,n.stylis)}(o,m),w=Ve(u,s);return b&&(w+=" "+b),m.className&&(w+=" "+m.className),v[Pe(g)&&!ge.has(g)?"class":"className"]=w,n&&(v.ref=n),(0,l.createElement)(g,v)}(k,e,t)}w.displayName=p;var k=l.forwardRef(w);return k.attrs=m,k.componentStyle=b,k.displayName=p,k.shouldForwardProp=g,k.foldedComponentIds=a?Ve(o.foldedComponentIds,o.styledComponentId):"",k.styledComponentId=h,k.target=a?o.target:e,Object.defineProperty(k,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=a?function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=0,a=t;r<a.length;r++)Ge(e,a[r],!0);return e}({},o.defaultProps,e):e}}),Ye(k,(function(){return".".concat(k.styledComponentId)})),i&&Be(k,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0}),k}function Dt(e,t){for(var n=[e[0]],r=0,a=t.length;r<a;r+=1)n.push(t[r],e[r+1]);return n}new Set;var Mt=function(e){return Object.assign(e,{isCss:!0})};function $t(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(He(e)||Qe(e))return Mt(Tt(Dt(pe,a([e],t,!0))));var r=e;return 0===t.length&&1===r.length&&"string"==typeof r[0]?Tt(r):Mt(Tt(Dt(r,t)))}function Ut(e,t,n){if(void 0===n&&(n=he),!t)throw Ke(1,t);var l=function(r){for(var l=[],o=1;o<arguments.length;o++)l[o-1]=arguments[o];return e(t,n,$t.apply(void 0,a([r],l,!1)))};return l.attrs=function(a){return Ut(e,t,r(r({},n),{attrs:Array.prototype.concat(n.attrs,a).filter(Boolean)}))},l.withConfig=function(a){return Ut(e,t,r(r({},n),a))},l}var Bt=function(e){return Ut(It,e)},Ht=Bt;ge.forEach((function(e){Ht[e]=Bt(e)}));var qt=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=Lt(e),mt.registerId(this.componentId+1)}return e.prototype.createStyles=function(e,t,n,r){var a=r(We(Tt(this.rules,t,n,r)),""),l=this.componentId+e;n.insertRules(l,l,a)},e.prototype.removeStyles=function(e,t){t.clearRules(this.componentId+e)},e.prototype.renderStyles=function(e,t,n,r){e>2&&mt.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();(function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return"";var n=ut(),r=We([n&&'nonce="'.concat(n,'"'),"".concat(le,'="true"'),"".concat(ie,'="').concat(ue,'"')].filter(Boolean)," ");return"<style ".concat(r,">").concat(t,"</style>")},this.getStyleTags=function(){if(e.sealed)throw Ke(2);return e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)throw Ke(2);var n=e.instance.toString();if(!n)return[];var a=((t={})[le]="",t[ie]=ue,t.dangerouslySetInnerHTML={__html:n},t),o=ut();return o&&(a.nonce=o),[l.createElement("style",r({},a,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new mt({isServer:!0}),this.sealed=!1}e.prototype.collectStyles=function(e){if(this.sealed)throw Ke(2);return l.createElement(Ct,{sheet:this.instance},e)},e.prototype.interleaveWithNodeStream=function(e){throw Ke(3)}})(),"__sc-".concat(le,"__");const Vt=n.p+"088d140132e39b3c37a8.ttf",Wt=n.p+"61beaa3b90e1cec18b6d.png",Qt=n.p+"7084bb098282843d3e7c.png",Gt=n.p+"3a9f8ad6118e6a48948c.png",Yt=n.p+"146e5ff479fb29e296a5.png",Kt=n.p+"d8650b6e171002a33565.png",Xt=n.p+"8977830b882bf99c64a0.png",Zt=n.p+"a240f710fc91caf7336e.png",Jt=n.p+"50f46cfa01bccb95b803.png",en=n.p+"64a2f60f82c421e1329d.png",tn=n.p+"984ac6d42c89f2dd1262.png",nn=n.p+"44465b2c8ddbf861a938.png",rn=n.p+"586f78e71f5ea3fb61fc.png",an=n.p+"64ae66d936a9e4e9a04b.png",ln=n.p+"d820159b3e047d490303.png",on=n.p+"832e39884161cc3116ab.png",un=n.p+"98eca942e0ae49ce35b3.png",sn={light:{name:"light",color:"#1A1919",bgColor:"#FBFBFB",borderColor:"#1A1919",imageCover:Qt,linkIcon:Gt,searchIcon:Kt,themeIcon:Zt,educationIcon:en,awardIcon:nn,footerBack:an,copyrightIcon:on,careerWayIcon:n.p+"5dbcccc0a82cbc564359.png"},dark:{name:"dark",color:"#FBFBFB",bgColor:"#1A1919",borderColor:"#FBFBFB",imageCover:Wt,linkIcon:Yt,searchIcon:Xt,themeIcon:Jt,educationIcon:tn,awardIcon:rn,footerBack:ln,copyrightIcon:un,careerWayIcon:n.p+"138577ed8897d0649857.png"}},cn=(0,l.createContext)({theme:sn.light,setTheme:()=>{}}),fn=()=>(0,l.useContext)(cn),dn=t=>{const[n,r]=(0,l.useState)("light");return(0,e.jsx)(cn.Provider,{value:{theme:sn[n],setTheme:r},children:t.children})},pn=(function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=$t.apply(void 0,a([e],t,!1)),i="sc-global-".concat(_e(JSON.stringify(o))),u=new qt(o,i),s=function(e){var t=Et(),n=l.useContext(At),r=l.useRef(t.styleSheet.allocateGSInstance(i)).current;return t.styleSheet.server&&c(r,e,t.styleSheet,n,t.stylis),l.useLayoutEffect((function(){if(!t.styleSheet.server)return c(r,e,t.styleSheet,n,t.stylis),function(){return u.removeStyles(r,t.styleSheet)}}),[r,e,t.styleSheet,n,t.stylis]),null};function c(e,t,n,a,l){if(u.isStatic)u.renderStyles(e,de,n,l);else{var o=r(r({},t),{theme:me(t,a,s.defaultProps)});u.renderStyles(e,o,n,l)}}return l.memo(s)})`

    @font-face {
        font-family: 'PixelifySans';
        src: url("${Vt}") format('truetype');
    }

    html, body, div, span, applet, object, iframe,
    h1, h2, h3, h4, h5, h6, p, blockquote, pre,
    a, abbr, acronym, address, big, cite, code,
    del, dfn, em, img, ins, kbd, q, s, samp,
    small, strike, strong, sub, sup, tt, var,
    b, u, i, center,
    dl, dt, dd, ol, ul, li,
    fieldset, form, label, legend,
    table, caption, tbody, tfoot, thead, tr, th, td,
    article, aside, canvas, details, embed,
    figure, figcaption, footer, header, hgroup,
    menu, nav, output, ruby, section, summary,
    time, mark, audio, video {
        margin: 0;
        padding: 0;
        border: 0;
        font-size: 100%;
        font: inherit;
        vertical-align: baseline;
    }

    article, aside, details, figcaption, figure,
    footer, header, hgroup, menu, nav, section {
        display: block;
    }

    body {
        line-height: 1;
    }

    ol, ul {
        list-style: none;
    }

    blockquote, q {
        quotes: none;
    }

    blockquote:before, blockquote:after,
    q:before, q:after {
        content: '';
        content: none;
    }

    table {
        border-collapse: collapse;
        border-spacing: 0;
    }
    
    button {
        padding: 0;
    }
    
    body {
        margin: 0;
        padding: 0;
        font-family: 'PixelifySans', sans-serif;
        background-color: ${e=>e.theme.bgColor};
        overflow-x: hidden;
    }
    
    * {
        box-sizing: border-box;
        cursor: none;
        transition: 0.3s color ease, 0.3s background-color ease, 0.3s border-color ease;
    }
    
    #tooltip-portal {
        position: absolute;
        width: 0;
        height: 0;
        left: 0!important;
        top: 0!important;
    }
    
    @media screen and (max-width: 560px) {
        * {
            cursor: auto;
        }
    }
`,hn=()=>{const{theme:t}=fn();return(0,e.jsx)(pn,{theme:t})},mn=Ht.h2`
    font-size: clamp(24px, 7.5vw, 64px);
    font-weight: 700;
    color: ${e=>e.theme.color};
    ${e=>e.css&&e.css}
`,gn=Ht.div`
    font-size: 20px;
    color: ${e=>e.theme.color};
    ${e=>e.css&&e.css}
`,vn=Ht.p`
    color: ${e=>e.theme.color};
    font-size: clamp(14px, 4.4vw, 16px);
    ${e=>e.css&&e.css}
`,yn=Ht.a`
    color: ${e=>e.theme.color};
    font-size: clamp(14px, 4.4vw, 24px);
    text-decoration: none;
    ${e=>e.css&&e.css}
`,bn=t=>{const{theme:n}=fn();return(0,e.jsx)(mn,Object.assign({theme:n},t,{children:t.children}))},wn=t=>{const{theme:n}=fn();return(0,e.jsx)(gn,{theme:n,css:t.css,children:t.children})},kn=t=>{const{theme:n}=fn();return(0,e.jsx)(vn,{theme:n,css:t.css,children:t.children})},Sn=t=>{const{theme:n}=fn();return(0,e.jsx)(yn,Object.assign({theme:n},t,{children:t.children}))};var xn=n(961);const En=(function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=We($t.apply(void 0,a([e],t,!1))),l=_e(r);return new _t(l,r)})`
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
`,Cn=Ht.div`
    color: ${e=>e.theme.color};
    border: 4px solid ${e=>e.theme.borderColor};
    padding: 12px;
    position: absolute;
    left: ${e=>e.$left}px;
    top: ${e=>e.$top}px;
    animation: ${En} 0.3s forwards ease;
    background-color: ${e=>e.theme.bgColor};
    text-wrap: nowrap;
`,_n=(0,l.forwardRef)(((t,n)=>{const{theme:r}=fn();return t.active&&(0,xn.createPortal)((0,e.jsx)(Cn,{ref:n,theme:r,$top:t.top,$left:t.left,children:t.text}),document.getElementById("tooltip-portal"))})),Pn=t=>{const[n,r]=(0,l.useState)(!1),[a,o]=(0,l.useState)({top:0,left:0}),i=(0,l.useRef)(null),u=(0,l.useRef)(null);return(0,l.useEffect)((()=>{if(u.current&&i.current&&n){const e=i.current.getBoundingClientRect(),t=u.current.getBoundingClientRect(),n=e.left+e.width/2,r=window.scrollY+e.bottom+20;let a;a=n+t.width>window.innerWidth?window.innerWidth-t.width-20:n-t.width/2,o({top:r,left:a})}}),[n]),(0,e.jsxs)("span",{ref:i,onMouseEnter:()=>r(!0),onMouseLeave:()=>r(!1),children:[t.children,(0,e.jsx)(_n,{ref:u,text:t.text,active:n,left:a.left,top:a.top})]})},zn=Ht.div`
    padding: clamp(5px, 1.5625vw, 27px) clamp(9px, 2.8125vw, 38px);
    display: flex;
    align-items: center;
    justify-content: space-between;
`,jn=$t`
    font-size: clamp(36px, 11.25vw, 48px);
    font-weight: 400;
`,Nn=Ht.div`
    display: flex;
    gap: clamp(10px, 2.6vw, 37px);
    align-items: center;

    @media screen and (max-width: 560px) {
        & a {
            display: none;
        }
    }
`,Tn=Ht.img`
    width: clamp(36px, 1.125vw, 48px);
    aspect-ratio: 1;
    object-position: center;
    object-fit: cover;
`,Ln=$t`
    font-size: clamp(16px, 2vw, 24px);

    &::selection {
        background: transparent;
    }

    &::-moz-selection {
        background: transparent;
    }
`,Rn=Ht.button`
    background-color: transparent;
    border: none;
    padding: 0;
    margin: 0;
`,On=()=>{const{theme:t,setTheme:n}=fn();return(0,e.jsxs)(zn,{children:[(0,e.jsx)(Sn,{css:jn,href:"/",children:"AT"}),(0,e.jsxs)(Nn,{children:[[{title:"обо мне",href:"#about"},{title:"технологии",href:"#techs"},{title:"проекты",href:"#projects"},{title:"контакты",href:"#contact"}].map((t=>(0,e.jsx)(Sn,{href:t.href,css:Ln,onClick:e=>{var n;e.preventDefault(),null===(n=document.querySelector(t.href))||void 0===n||n.scrollIntoView({behavior:"smooth"})},children:t.title},t.href))),(0,e.jsx)(Pn,{text:"сменить тему",children:(0,e.jsx)(Rn,{onClick:()=>n("light"===t.name?"dark":"light"),children:(0,e.jsx)(Tn,{src:t.themeIcon,alt:""})})})]})]})},An=(e,t)=>Math.trunc(Math.random()*(t-e))+e,Fn=()=>`rgb(${An(0,255)}, ${An(0,255)}, ${An(0,255)})`,In=()=>{const[t,n]=[window.innerWidth,window.innerHeight];let r=null;const a=e=>{requestAnimationFrame((()=>{if(r){const t=performance.now(),n=8*Math.trunc((e.clientX+window.scrollX)/8),a=8*Math.trunc((e.clientY+window.scrollY)/8);r.fillStyle=Fn(),r.fillRect(n,a,8,8);const l=()=>{if(performance.now()-t>=200)return null==r?void 0:r.clearRect(n,a,8,8);requestAnimationFrame(l)};requestAnimationFrame(l)}}))},o=e=>{const t=performance.now(),n=8*Math.trunc((e.clientX+window.scrollX)/8),a=8*Math.trunc((e.clientY+window.scrollY)/8);r&&(r.fillStyle=Fn(),r.fillRect(n,a,8,8));let l=1;const o=()=>{if(r&&l<10){r.fillStyle=Fn(),r.fillRect(n-8*l,a,8,8),r.fillStyle=Fn(),r.fillRect(n+8*l,a,8,8),r.fillStyle=Fn(),r.fillRect(n,a+8*l,8,8),r.fillStyle=Fn(),r.fillRect(n,a-8*l,8,8);const e=l=>()=>{const o=performance.now()-t;r&&l<10&&(o>=50*l?(r.clearRect(n-8*l,a,8,8),r.clearRect(n+8*l,a,8,8),r.clearRect(n,a+8*l,8,8),r.clearRect(n,a-8*l,8,8)):requestAnimationFrame(e(l)))};requestAnimationFrame(o),requestAnimationFrame(e(l)),l++}};requestAnimationFrame(o)};return(0,l.useEffect)((()=>(document.body.addEventListener("mousemove",a),document.body.addEventListener("click",o),()=>{document.body.removeEventListener("mousemove",a),document.body.removeEventListener("click",o)})),[]),(0,e.jsx)("canvas",{width:t,height:n,ref:e=>{e&&(r=e.getContext("2d",{willReadFrequently:!0}))}})},Dn=(0,l.forwardRef)(((t,n)=>(0,e.jsx)("canvas",{ref:n,width:t.width,height:t.height}))),Mn=Ht.button`
    border: 4px solid ${e=>e.theme.borderColor};
    background-color: ${e=>e.theme.bgColor};
    position: relative;
    transition: all 0.5s ease;

    &:hover {
        transform: scale(1.2);
    }

    @media screen and (min-width: 1024px) {
        border-width: 6px;
    }
`,$n=Ht.div`
    padding: 12px 18px;
    font-family: 'PixelifySans', sans-serif;
    font-size: 16px;
    font-weight: 400;
    z-index: 2;
    position: relative;
    filter: invert(1);
    mix-blend-mode: difference;

    &::selection {
        background: transparent;
    }
    &::-moz-selection {
        background: transparent;
    }

    @media screen and (min-width: 1024px) {
        font-size: 36px;
        padding: 22px 36px;
    }
`,Un=Ht.div`
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    z-index: 0;

    * {
        width: 100%;
        height: 100%;
    }
`,Bn=t=>{const n=(0,l.useRef)(null),r=(0,l.useRef)(null),[a,o]=(0,l.useState)({width:0,height:0}),i=Math.floor(a.width/8),{theme:u}=fn();return(0,l.useEffect)((()=>{if(n.current){const{width:e,height:t}=n.current.getBoundingClientRect();o({width:e,height:t})}}),[]),(0,e.jsxs)(Mn,{ref:n,onMouseEnter:()=>{if(r.current){const e=r.current.getContext("2d",{willReadFrequently:!0});let[t,n]=[0,0];const l=()=>{n<a.height&&(e.fillStyle=`rgb(${An(150,255)}, ${An(150,255)}, ${An(150,255)})`,t<a.width?(e.fillRect(t,n,i,i),t+=i):(t=0,n+=i),requestAnimationFrame(l))};requestAnimationFrame(l)}},onMouseLeave:()=>{if(r.current){const e=r.current.getContext("2d",{willReadFrequently:!0});let[t,n]=[a.width,a.height];const l=()=>{n>-i&&(t>-i?(e.clearRect(t,n,i,i),t-=i):(t=a.width,n-=i)),requestAnimationFrame(l)};requestAnimationFrame(l)}},theme:u,children:[(0,e.jsx)(Un,{children:(0,e.jsx)(Dn,{width:a.width,height:a.height,ref:r})}),(0,e.jsx)($n,{theme:u,children:t.children})]})},Hn=Ht.div`
    width: clamp(292px, 91.25vw, 1274px);
    margin: 0 auto;
`,qn=t=>(0,e.jsx)(Hn,{children:t.children}),Vn=Ht.div`
    position: relative;
    width: 184px;
    height: 184px;
`,Wn=Ht.img`
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0.1;
`,Qn=Ht.img`
    width: 128px;
    height: 128px;
    object-position: center;
    object-fit: cover;
    position: absolute;
    top: calc(50% - 64px);
    left: calc(50% - 64px);
`,Gn=Ht.div`
    display: flex;
    align-items: center;
    flex-direction: column;
    width: 292px;
    gap: 20px;
`,Yn=$t`
    text-align: center;
    font-size: 20px;
    font-weight: 400;
`,Kn=t=>{const{theme:n}=fn();return(0,e.jsxs)(Gn,{children:[(0,e.jsxs)(Vn,{children:[(0,e.jsx)(Wn,{src:n.imageCover,alt:""}),(0,e.jsx)(Qn,{src:"education"===t.variant?n.educationIcon:n.awardIcon,alt:""})]}),(0,e.jsx)(wn,{css:Yn,children:"education"===t.variant?(0,e.jsx)(e.Fragment,{children:"Окончил “Астраханский колледж вычислительной техники” (АКВТ)"}):(0,e.jsxs)(e.Fragment,{children:["Призер регионального этапа Worldskills",(0,e.jsx)("br",{})," 2 место"]})})]})},Xn=Ht.div`
    display: flex;
    align-items: center;
    justify-content: space-between;
    
    @media screen and (max-width: 560px) {
        flex-direction: column;
        gap: 60px;
    }
`,Zn=$t`
    font-size: 64px;
    font-weight: 400;
    text-align: center;
    flex-shrink: 0;
`,Jn=()=>(0,e.jsx)(qn,{children:(0,e.jsxs)(Xn,{children:[(0,e.jsx)(Kn,{variant:"education"}),(0,e.jsx)(wn,{css:Zn,children:"UTC +4"}),(0,e.jsx)(Kn,{variant:"award"})]})}),er=n.p+"5007e66464adfb0b3869.png",tr=n.p+"27ad5b71e3205b501829.png",nr=n.p+"e3dc98447cda70a1a1cb.png",rr=Ht.div`
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    gap: 50px;
    padding: 74px 0;
    
    @media screen and (max-width: 560px) {
        padding: 0 0 74px 0;
    }
`,ar=$t`
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 20px;
`,lr=Ht.img`
    width: 128px;
    height: 128px;
    object-position: center;
    object-fit: cover;
`,or=$t`
    text-align: center;
    font-size: clamp(24px, 7.5vw, 40px);
`,ir=()=>(0,e.jsx)(qn,{children:(0,e.jsxs)(rr,{children:[(0,e.jsx)(Pn,{text:"Telegram",children:(0,e.jsxs)(Sn,{css:ar,href:"https://t.me/str7ct",children:[(0,e.jsx)(lr,{src:er,alt:""}),(0,e.jsx)(wn,{css:or,children:"@str7ct"})]})}),(0,e.jsx)(Pn,{text:"Gmail",children:(0,e.jsxs)(Sn,{css:ar,href:"mailto:atimrish11@gmail.com",children:[(0,e.jsx)(lr,{src:tr,alt:""}),(0,e.jsx)(wn,{css:or,children:"atimrish11@gmail.com"})]})}),(0,e.jsx)(Pn,{text:"Github",children:(0,e.jsxs)(Sn,{css:ar,href:"https://github.com/atimrish",children:[(0,e.jsx)(lr,{src:nr,alt:""}),(0,e.jsx)(wn,{css:or,children:"atimrish"})]})})]})}),ur=Ht.div`
    background-image: url("${e=>e.theme.footerBack}");
    background-repeat: repeat-x;
    width: 100%;
    padding: 62px 0;
`,sr=Ht.div`
    display: flex;
    align-items: center;
    gap: 22px;
`,cr=Ht.img`
    width: 48px;
    height: 48px;
    object-position: center;
    object-fit: cover;
`,fr=$t`
    font-size: clamp(16px, 5vw, 24px);
    font-weight: 700;
`,dr=()=>{const{theme:t}=fn();return(0,e.jsx)(ur,{theme:t,children:(0,e.jsx)(qn,{children:(0,e.jsxs)(sr,{children:[(0,e.jsx)(cr,{src:t.copyrightIcon,alt:""}),(0,e.jsx)(wn,{css:fr,children:"2025 | All rights reserved"})]})})})},pr=Ht.div`
    width: clamp(292px, 91.25vw, 542px);
    padding: clamp(14px, 4.375vw, 25px);
    border: 6px solid ${e=>e.theme.borderColor};
    transition: all 0.3s ease;

    @media screen and (max-width: 560px) {
        border-width: 4px;
    }
    
    &:hover {
        transform: scale(1.01);
    }
`,hr=Ht.div`
    display: flex;
    gap: 10px;
    align-items: end;
`,mr=Ht.div`
    display: flex;
    gap: clamp(5px, 1.5625vw, 18px);
`,gr=Ht.img`
    width: clamp(28px, 8.75vw, 48px);
    aspect-ratio: 1;
    object-fit: cover;
    object-position: center;
`,vr=Ht.div`
    margin: 25px 0;
`,yr=$t`
    font-size: clamp(20px, 6.25vw, 48px);
    font-weight: 400;
`,br=$t`
    font-size: clamp(14px, 4.375vw, 32px);
    font-weight: 400;
`,wr=$t`
    margin-top: 6px;
    font-size: clamp(14px, 4.375vw, 32px);
    font-weight: 400;   
`,kr=$t`
    margin: 25px 0;
    font-size: clamp(20px, 6.25vw, 40px);
    font-weight: 400;
`,Sr=t=>{const{theme:n}=fn();return(0,e.jsxs)(pr,{theme:n,children:[(0,e.jsxs)(hr,{children:[(0,e.jsx)(wn,{css:yr,children:t.year}),(0,e.jsx)(wn,{css:br,children:t.month})]}),t.durationTime&&(0,e.jsx)(wn,{css:wr,children:t.durationTime}),(0,e.jsx)(wn,{css:kr,children:t.job}),(0,e.jsx)(vr,{children:t.renderDescription()}),(0,e.jsx)(mr,{children:t.techsImageSources.map((t=>(0,e.jsx)(gr,{src:t,alt:""},t)))})]})},xr=n.p+"a246cdc93bd5e79f442d.png",Er=n.p+"74bd7918008c7c163d20.png",Cr=n.p+"9d5ad97f1bedbba327d7.png",_r=n.p+"390f64ea3f67b43e23c4.png",Pr=n.p+"125ec699850c650bb520.png",zr=n.p+"84e1f6e0808b6ca9832e.png",jr=n.p+"047a4b444bcd059a3f8f.png",Nr=n.p+"315772fa4ff498f9a576.png",Tr=n.p+"e2f549839860e2e5b845.png",Lr=n.p+"9ad1f1f815c9bc6fedd4.png",Rr=n.p+"5d58fb0d41164d0d1de5.png",Or=$t`
    font-weight: 500;
    font-size: clamp(16px, 5vw, 40px);
    text-align: center;
    margin: 74px 0;
`,Ar=Ht.div`
    display: flex;
    align-items: center;
    justify-content: center;
    gap: clamp(15px, 4.6875vw, 48px);
    margin-top: 74px;
`,Fr=Ht.img`
    width: clamp(70px, 21.875vw, 198px);
    aspect-ratio: 3.5;
    object-fit: contain;
    object-position: center;
`,Ir=Ht.div`
    display: flex;
    flex-direction: column;
    gap: 40px;  
    
    & > *:nth-child(odd) {
        align-self: start;
    }

    & > *:nth-child(even) {
        align-self: end;
    }
    
    & > * {
        flex-shrink: 0;
    }
`,Dr=()=>{const{theme:t}=fn();return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(Ar,{children:[(0,e.jsx)(Fr,{src:t.careerWayIcon,alt:""}),(0,e.jsx)(wn,{css:Or,children:"путь в карьере"}),(0,e.jsx)(Fr,{src:t.careerWayIcon,alt:""})]}),(0,e.jsxs)(Ir,{children:[(0,e.jsx)(Sr,{year:2024,month:"август",job:"Freelance",techsImageSources:[xr,Er,Cr,_r,Pr,zr],renderDescription:()=>(0,e.jsx)(kn,{children:"Тут будет описание"})}),(0,e.jsx)(Sr,{year:2023,month:"август",durationTime:"1 год",job:"Fullstack Developer",techsImageSources:[jr,Nr,Pr,zr,Tr,Lr],renderDescription:()=>(0,e.jsx)(kn,{children:"Тут будет описание"})}),(0,e.jsx)(Sr,{year:2022,month:"сентябрь",durationTime:"4 мес",job:"Стажер",techsImageSources:[Rr,Nr,Pr,Tr],renderDescription:()=>(0,e.jsx)(kn,{children:"Тут будет описание"})})]})]})},Mr=Ht.div`
    position: relative;
`,$r=Ht.canvas`
    position: absolute;
    left: 0;
    top: 0;
`,Ur=(0,l.forwardRef)(((t,n)=>{const r=(0,l.useRef)(null),a=(0,l.useRef)(null);return(0,l.useImperativeHandle)(n,(()=>({canvas:r.current,bgCanvas:a.current}))),(0,l.useEffect)((()=>{if(a.current){const e=a.current.getContext("2d",{willReadFrequently:!0}),n=new Image;n.src=t.imageSource,n.onload=()=>e.drawImage(n,0,0,t.width,t.height)}}),[]),(0,e.jsxs)(Mr,{children:[(0,e.jsx)($r,{width:t.width,height:t.height,ref:r}),(0,e.jsx)("canvas",{ref:a,width:t.width,height:t.height})]})})),Br=(e,t)=>{const n=Math.max(0,e-t),r=Math.min(255,e+t);return An(n,r)},Hr=Ht.div`
    width: 128px;
    height: 128px;
    position: relative;
    display: grid;
    place-items: center;

    transition: all 0.3s ease-in;
    filter: grayscale(1);

    &:hover {
        filter: grayscale(0);
        transform: scale(1.15);
    }
`,qr=Ht.img`
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    opacity: 0.1;
`,Vr=t=>{const{theme:n}=fn();let r=!1;const a=4.5,o=(0,l.useRef)(null);return(0,e.jsxs)(Hr,{onMouseEnter:()=>{if(r=!0,o.current&&o.current.canvas&&o.current.bgCanvas){const e=o.current.canvas.getContext("2d",{willReadFrequently:!0}),n=o.current.bgCanvas.getContext("2d",{willReadFrequently:!0}),l=()=>{const[o,i]=[An(0,16)*a,An(0,16)*a],{data:u}=n.getImageData(o,i,1,1);0!==u[3]&&(e.fillStyle=`rgb(${Br(u[0],t.deviation)}, ${Br(u[1],t.deviation)}, ${Br(u[2],t.deviation)})`,e.fillRect(o,i,a,a)),r&&requestAnimationFrame(l)};requestAnimationFrame(l)}},onMouseLeave:()=>{if(r=!1,o.current&&o.current.canvas){const e=o.current.canvas.getContext("2d",{willReadFrequently:!0});let[t,n]=[0,0];const r=()=>{t<72?(e.clearRect(t,n,a,a),t+=a,requestAnimationFrame(r)):n<72&&(n+=a,t=0,requestAnimationFrame(r))};requestAnimationFrame(r)}},children:[(0,e.jsx)(qr,{src:n.imageCover}),(0,e.jsx)(Ur,{ref:o,width:72,height:72,imageSource:t.imageSource})]})},Wr=n.p+"c6b06e2287fadea5155f.png",Qr=n.p+"3fd5289090626cad343e.png",Gr=n.p+"afedc5b5a1fb76f797b7.png",Yr=n.p+"3cb20fefb1fb21f6ff49.png",Kr=n.p+"46d1313ea835eca77b05.png",Xr=n.p+"5eb1e2339eb1c685465e.png",Zr=n.p+"16bf7f55df600f9497e5.png",Jr=Ht.div`
    display: flex;
    gap: clamp(21px, 6.5625vw, 52px);
    flex-wrap: wrap;
    justify-content: center;
`,ea=()=>(0,e.jsx)(qn,{children:(0,e.jsxs)(Jr,{children:[(0,e.jsx)(Pn,{text:"HTML",children:(0,e.jsx)(Vr,{imageSource:Wr,deviation:30})}),(0,e.jsx)(Pn,{text:"CSS",children:(0,e.jsx)(Vr,{imageSource:Qr,deviation:30})}),(0,e.jsx)(Pn,{text:"Javascript",children:(0,e.jsx)(Vr,{imageSource:Rr,deviation:70})}),(0,e.jsx)(Pn,{text:"Typescript",children:(0,e.jsx)(Vr,{imageSource:Er,deviation:50})}),(0,e.jsx)(Pn,{text:"React",children:(0,e.jsx)(Vr,{imageSource:xr,deviation:120})}),(0,e.jsx)(Pn,{text:"Redux",children:(0,e.jsx)(Vr,{imageSource:Gr,deviation:50})}),(0,e.jsx)(Pn,{text:"Git",children:(0,e.jsx)(Vr,{imageSource:Yr,deviation:30})}),(0,e.jsx)(Pn,{text:"Styled Components",children:(0,e.jsx)(Vr,{imageSource:Kr,deviation:40})}),(0,e.jsx)(Pn,{text:"Webpack",children:(0,e.jsx)(Vr,{imageSource:Xr,deviation:50})}),(0,e.jsx)(Pn,{text:"Storybook",children:(0,e.jsx)(Vr,{imageSource:Zr,deviation:50})})]})}),ta=$t`
    margin: 74px 0 0 0
`,na=$t`
    font-size: 40px;
    margin-bottom: 74px;
`,ra=()=>(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(bn,{id:"techs",css:ta,children:"#технологии"}),(0,e.jsx)(wn,{css:na,children:"основной стек"}),(0,e.jsx)(ea,{})]}),aa=Ht.div`
    padding: clamp(14px, 4vw, 36px);
    border: 6px solid ${e=>e.theme.borderColor};
    background-color: ${e=>e.theme.bgColor};
    width: clamp(292px, 70vw, 413px);
    transition: transform 0.3s ease;

    @media screen and (max-width: 560px) {
        border-width: 4px;
    }
    
    &:hover {
        transform: scale(1.01);
    }
`,la=Ht.img`
    width: 100%;
    aspect-ratio: 1;
    background-color: transparent;
    object-fit: cover;
    object-position: center;

`,oa=Ht.h3`
    font-size: 24px;
    font-weight: 600;
    margin: 19px 0;
    color: ${e=>e.theme.color};

    @media screen and (max-width: 560px) {
        font-size: 20px;
    }
`,ia=Ht.p`
    font-size: 16px;
    font-weight: 400;
    color: ${e=>e.theme.color};

    @media screen and (max-width: 560px) {
        font-size: 14px;
    }
`,ua=Ht.div`
    display: flex;
    gap: clamp(6px, 1.8vw, 18px);
    margin: 24px 0;
`,sa=Ht.div`
    padding: 8px;
    border: 1px solid ${e=>e.theme.borderColor};
`,ca=Ht.img`
    width: 40px;
    height: 40px;
    object-fit: contain;
    object-position: center;
`,fa=Ht.div`
    display: flex;
    justify-content: end;
    align-items: center;
    gap: clamp(6px, 1.8vw, 18px);
`,da=Ht.a`
    display: block;
`,pa=Ht.img`
    width: ${e=>e.$size}px;
    height: ${e=>e.$size}px;
    object-fit: contain;
    object-position: center;
`,ha=t=>{const{theme:n}=fn();return(0,e.jsxs)(aa,{theme:n,children:[(0,e.jsx)(la,{src:t.projectCover,alt:""}),(0,e.jsx)(oa,{theme:n,children:t.heading}),(0,e.jsx)(ia,{theme:n,children:t.description}),(0,e.jsx)(ua,{children:t.techImageSources.map((t=>(0,e.jsx)(sa,{theme:n,children:(0,e.jsx)(ca,{src:t,alt:""})},t)))}),(0,e.jsxs)(fa,{children:[t.previewLink&&(0,e.jsx)(da,{href:t.previewLink,children:(0,e.jsx)(Pn,{text:"Ссылка на сайт",children:(0,e.jsx)(pa,{$size:32,src:n.linkIcon})})}),t.githubLink&&(0,e.jsx)(da,{href:t.githubLink,children:(0,e.jsx)(Pn,{text:"Ссылка на репозиторий GitHub",children:(0,e.jsx)(pa,{$size:48,src:nr})})})]})]})},ma=n.p+"8c45efe1f3ffda9be88a.png",ga=n.p+"2c171d07ef46afa16c40.png",va=n.p+"9cd57deefe7ac62bb4c7.png",ya=n.p+"70d5e714dae4d1afefa4.png",ba=n.p+"3a2dc0fffc624e17a58e.png",wa=n.p+"a9de4f179e7ee5581812.png",ka=$t`
    margin: 74px 0
`,Sa=Ht.div`
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin: clamp(14px, 4.375vw, 54px) 0;
    gap: 16px;
`,xa=()=>{const[t,n]=(0,l.useState)("");return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(bn,{id:"projects",css:ka,children:"#проекты"}),(0,e.jsxs)(Sa,{children:[(0,e.jsx)(ha,{heading:"Wordle",description:"Игра Wordle. Цель игры - отгадать загаданное слово.",techImageSources:[xr,Gr,Er],projectCover:ya,githubLink:"https://github.com/atimrish/wordle",previewLink:"https://atimrish.github.io/wordle"}),(0,e.jsx)(ha,{heading:"2048",description:"Игра, в которой нужно собрать ячейку с числом 2048.",techImageSources:[xr,Er],projectCover:ba,githubLink:"https://github.com/atimrish/2048",previewLink:"https://atimrish.github.io/2048"}),(0,e.jsx)(ha,{heading:"Crystals landing",description:"Лендинг-страница сайта crystals.com. Сделана для демонстрации верстки.",techImageSources:[Wr,Qr,Rr],projectCover:ga,githubLink:"https://github.com/atimrish/crystals-landing"}),(0,e.jsx)(ha,{heading:"Hydra landing",description:"Лендинг-страница сайта VR-технологий. Сделана для демонстрации верстки.",techImageSources:[Wr,Qr,Rr],projectCover:va,githubLink:"https://github.com/atimrish/hydra-landing"}),(0,e.jsx)(ha,{heading:"Greenery",description:"Интернет-магазин товаров для сада.",techImageSources:[ma,Lr],projectCover:wa,githubLink:"https://github.com/atimrish/Greenery"}),(0,e.jsx)(ha,{heading:"Queline",description:"Тематический видеохостинг по играм.",techImageSources:[xr],projectCover:xr,githubLink:"https://github.com/atimrish/Queline"})]})]})},Ea=Ht.div`
    width: 100vw;
    height: 100vh;
    position: relative;
`,Ca=Ht.div`
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
`,_a=Ht.div`
    width: 16px;
    height: 16px;
    background-color: ${e=>e.theme.bgColor};
    border: 4px solid ${e=>e.theme.borderColor};
    position: fixed;
    left: 0;
    top: 0;
    pointer-events: none;
    z-index: 1;
    
    @media screen and (max-width: 560px) {
        & {
            display: none;
        }
    }
`,Pa=$t`
    text-align: center;
    font-weight: 700;
    font-size: clamp(40px, 12.5vw, 96px);

    &::selection {
        background: transparent;
    }
    &::-moz-selection {
        background: transparent;
    }
`,za=$t`
    text-align: center;
    font-size: clamp(20px, 6.25vw, 64px);
    font-weight: 400;

    &::selection {
        background: transparent;
    }
    &::-moz-selection {
        background: transparent;
    }
`,ja=Ht.div`
    margin: 100px auto 0 auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 40px;
`,Na=$t`
    margin: 74px 0
`,Ta=Ht.div`
    margin-top: 74px;
`,La=()=>{const t=(0,l.useRef)(null),{theme:n}=fn();return(0,l.useEffect)((()=>{const e=e=>{t.current&&(t.current.style.transform=`translate(${e.clientX-8}px, ${e.clientY-8}px)`)};return document.body.addEventListener("mousemove",e),()=>document.body.removeEventListener("mousemove",e)}),[]),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(_a,{ref:t,theme:n}),(0,e.jsxs)(Ea,{children:[(0,e.jsx)(Ca,{children:(0,e.jsx)(In,{})}),(0,e.jsx)(On,{}),(0,e.jsxs)(ja,{children:[(0,e.jsx)(wn,{css:Pa,children:"Atimrish"}),(0,e.jsx)(wn,{css:za,children:"Frontend Developer"}),(0,e.jsx)(Bn,{children:"Скачать резюме"})]})]}),(0,e.jsxs)(qn,{children:[(0,e.jsx)(bn,{id:"about",css:Na,children:"#обо мне"}),(0,e.jsx)(Jn,{}),(0,e.jsx)(Dr,{}),(0,e.jsx)(ra,{}),(0,e.jsx)(xa,{}),(0,e.jsx)(bn,{id:"contact",css:Na,children:"#контакты"}),(0,e.jsx)(ir,{})]}),(0,e.jsx)(Ta,{children:(0,e.jsx)(dr,{})})]})},Ra=document.getElementById("root");t.createRoot(Ra).render((0,e.jsx)((()=>(0,e.jsx)(e.Fragment,{children:(0,e.jsx)(l.StrictMode,{children:(0,e.jsxs)(dn,{children:[(0,e.jsx)(hn,{}),(0,e.jsx)(La,{})]})})})),{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,